<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HPSocket.Net</name>
    </assembly>
    <members>
        <member name="T:HPSocket.Adapter.BetweenAndDataReceiveAdapter`1">
            <summary>
            区间数据接收适配器基类
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="F:HPSocket.Adapter.BetweenAndDataReceiveAdapter`1._startBoyerMoore">
            <summary>
            Start Boyer Moore
            <remarks>因为同一个连接不会同时触发OnReceive回调, 所以可以这么玩</remarks>
            </summary>
        </member>
        <member name="F:HPSocket.Adapter.BetweenAndDataReceiveAdapter`1._endBoyerMoore">
            <summary>
            End Boyer Moore
            <remarks>因为同一个连接不会同时触发OnReceive回调, 所以可以这么玩</remarks>
            </summary>
        </member>
        <member name="M:HPSocket.Adapter.BetweenAndDataReceiveAdapter`1.#ctor(System.Byte[],System.Byte[])">
            <summary>
            区间数据接收适配器基类构造函数
            </summary>
            <param name="start">区间起始</param>
            <param name="end">区间结束</param>
        </member>
        <member name="M:HPSocket.Adapter.BetweenAndDataReceiveAdapter`1.OnReceive``1(``0,System.IntPtr,System.Byte[],HPSocket.Adapter.ParseRequestBody{``0,`0})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Adapter.BetweenAndDataReceiveAdapter`1.ParseRequestBody(System.Byte[])">
            <summary>
            解析请求包体到对象
            </summary>
            <param name="data">包体</param>
            <returns>需子类根据包体data自己解析对象并返回</returns>
        </member>
        <member name="T:HPSocket.Adapter.DataReceiveAdapter`1">
            <summary>
            数据接收适配器基类
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="F:HPSocket.Adapter.DataReceiveAdapter`1._dataReceiveAdapterCache">
            <summary>
            数据接收适配器信息
            </summary>
        </member>
        <member name="M:HPSocket.Adapter.DataReceiveAdapter`1.OnOpen(System.IntPtr)">
            <summary>
            打开连接
            </summary>
            <param name="connId"></param>
        </member>
        <member name="M:HPSocket.Adapter.DataReceiveAdapter`1.OnReceive``1(``0,System.IntPtr,System.Byte[],HPSocket.Adapter.ParseRequestBody{``0,`0})">
            <summary>
            数据到达
            </summary>
            <typeparam name="TSender"></typeparam>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="data"></param>
            <param name="parseRequestBody"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Adapter.DataReceiveAdapter`1.OnClose(System.IntPtr)">
            <summary>
            关闭连接
            </summary>
            <param name="connId"></param>
        </member>
        <member name="T:HPSocket.Adapter.DataReceiveAdapterInfo">
            <summary>
            数据接收适配器信息
            </summary>
        </member>
        <member name="P:HPSocket.Adapter.DataReceiveAdapterInfo.ConnId">
            <summary>
            连接id
            </summary>
        </member>
        <member name="P:HPSocket.Adapter.DataReceiveAdapterInfo.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:HPSocket.Adapter.FixedHeaderDataReceiveAdapter`1">
            <summary>
            固定包头数据接收适配器基类
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="F:HPSocket.Adapter.FixedHeaderDataReceiveAdapter`1._headerSize">
            <summary>
            包头长度, 组件在调用GetBodySize()方法时候会给定此长度的数据, 需要继承当前接口的类在构造函数中设置包头长度
            </summary>
        </member>
        <member name="F:HPSocket.Adapter.FixedHeaderDataReceiveAdapter`1._maxPacketSize">
            <summary>
             最大封包长度
            </summary>
        </member>
        <member name="M:HPSocket.Adapter.FixedHeaderDataReceiveAdapter`1.#ctor(System.Int32,System.Int32)">
            <summary>
            固定包头数据接收适配器基类构造函数
            </summary>
            <param name="headerSize">包头长度</param>
            <param name="maxPacketSize">最大封包长度, 0.不限</param>
        </member>
        <member name="M:HPSocket.Adapter.FixedHeaderDataReceiveAdapter`1.OnReceive``1(``0,System.IntPtr,System.Byte[],HPSocket.Adapter.ParseRequestBody{``0,`0})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Adapter.FixedHeaderDataReceiveAdapter`1.GetBodySize(System.Byte[])">
            <summary>
            获取包体长度
            </summary>
            <param name="header">包头, 其长度是HeaderLength属性指定的长度</param>
            <returns>需子类根据header自己解析包体实际长度并返回</returns>
        </member>
        <member name="M:HPSocket.Adapter.FixedHeaderDataReceiveAdapter`1.ParseRequestBody(System.Byte[],System.Byte[])">
            <summary>
            解析请求包体到对象
            </summary>
            <param name="header">包头</param>
            <param name="data">包体</param>
            <returns>需子类根据包体data自己解析对象并返回</returns>
        </member>
        <member name="T:HPSocket.Adapter.FixedSizeDataReceiveAdapter`1">
            <summary>
            定长数据接收适配器基类
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="F:HPSocket.Adapter.FixedSizeDataReceiveAdapter`1._packetSize">
            <summary>
            封包长度
            </summary>
        </member>
        <member name="M:HPSocket.Adapter.FixedSizeDataReceiveAdapter`1.#ctor(System.Int32)">
            <summary>
            定长数据接收适配器基类构造函数
            </summary>
            <param name="packetSize">包长</param>
        </member>
        <member name="M:HPSocket.Adapter.FixedSizeDataReceiveAdapter`1.OnReceive``1(``0,System.IntPtr,System.Byte[],HPSocket.Adapter.ParseRequestBody{``0,`0})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Adapter.FixedSizeDataReceiveAdapter`1.ParseRequestBody(System.Byte[])">
            <summary>
            解析请求包体到对象
            </summary>
            <param name="data">包体</param>
            <returns>需子类根据包体data自己解析对象并返回</returns>
        </member>
        <member name="T:HPSocket.Adapter.TerminatorDataReceiveAdapter`1">
            <summary>
            结束符数据接收适配器基类
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="F:HPSocket.Adapter.TerminatorDataReceiveAdapter`1._boyerMoore">
            <summary>
            Boyer Moore
            <remarks>因为同一个连接不会同时触发OnReceive回调, 所以可以这么玩</remarks>
            </summary>
        </member>
        <member name="M:HPSocket.Adapter.TerminatorDataReceiveAdapter`1.#ctor(System.Byte[])">
            <summary>
            结束符数据接收适配器基类构造函数
            </summary>
            <param name="terminator">结束符</param>
        </member>
        <member name="M:HPSocket.Adapter.TerminatorDataReceiveAdapter`1.OnReceive``1(``0,System.IntPtr,System.Byte[],HPSocket.Adapter.ParseRequestBody{``0,`0})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Adapter.TerminatorDataReceiveAdapter`1.ParseRequestBody(System.Byte[])">
            <summary>
            解析请求包体到对象
            </summary>
            <param name="data">包体</param>
            <returns>需子类根据包体data自己解析对象并返回</returns>
        </member>
        <member name="T:HPSocket.AsyncQueue.AsyncQueue`1">
            <summary>
            多消费者异步消费队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:HPSocket.AsyncQueue.AsyncQueue`1._workers">
            <summary>
            数据操作类
            </summary>
        </member>
        <member name="F:HPSocket.AsyncQueue.AsyncQueue`1._queue">
            <summary>
            消费队列实体
            </summary>
        </member>
        <member name="F:HPSocket.AsyncQueue.AsyncQueue`1._taskProc">
            <summary>
            任务处理函数
            </summary>
        </member>
        <member name="M:HPSocket.AsyncQueue.AsyncQueue`1.#ctor(System.UInt32,System.Action{`0})">
            <summary>
            构造方法
            </summary>
            <param name="consumerCount">消费者数量</param>
            <param name="taskProc">任务处理函数</param>
        </member>
        <member name="P:HPSocket.AsyncQueue.AsyncQueue`1.Count">
            <summary>
            剩余数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.AsyncQueue.AsyncQueue`1.Enqueue(`0)">
            <summary>
            队列添加数据
            </summary>
            <param name="item">数据实体</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="P:HPSocket.AsyncQueue.AsyncQueue`1.ConsumerCount">
            <summary>
            消费者数量
            </summary>
        </member>
        <member name="M:HPSocket.AsyncQueue.AsyncQueue`1.AddConsumer(System.UInt32)">
            <summary>
            添加消费者
            </summary>
        </member>
        <member name="M:HPSocket.AsyncQueue.AsyncQueue`1.RemoveConsumer(System.UInt32)">
            <summary>
            删除消费者
            </summary>
        </member>
        <member name="M:HPSocket.AsyncQueue.AsyncQueue`1.Shutdown">
            <summary>
            停止消费
            </summary>
        </member>
        <member name="M:HPSocket.AsyncQueue.AsyncQueue`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:HPSocket.AsyncQueue.Worker`1._collection">
            <summary>
            消费队列实体
            </summary>
        </member>
        <member name="F:HPSocket.AsyncQueue.Worker`1._taskProc">
            <summary>
            任务处理函数
            </summary>
        </member>
        <member name="F:HPSocket.AsyncQueue.Worker`1._cts">
            <summary>
            控制线程令牌
            </summary>
        </member>
        <member name="M:HPSocket.AsyncQueue.Worker`1.#ctor(System.Collections.Concurrent.BlockingCollection{`0},System.Action{`0})">
            <summary>
            构造方法
            </summary>
            <param name="collection">消费队列实体</param>
            <param name="taskProc">任务处理函数</param>
        </member>
        <member name="M:HPSocket.AsyncQueue.Worker`1.DoWork">
            <summary>
            消费数据方法
            </summary>
        </member>
        <member name="M:HPSocket.AsyncQueue.Worker`1.Stop">
            <summary>
            停止线程工作
            </summary>
        </member>
        <member name="M:HPSocket.AsyncQueue.Worker`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent._disposed">
            <summary>
            是否释放了
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent._connectionTimeout">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent._syncRecvTimeout">
            <summary>
            同步接收超时时间
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent._async">
            <summary>
            异步连接
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent._proxyList">
            <summary>
            代理列表
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent._connProxy">
            <summary>
            连接分配的代理ip
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent._connProxyCache">
            <summary>
            连接分配的代理ip的缓存,连接成功或失败后删除
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent.ListenerPtr">
            <summary>
            监听对象指针
            </summary>
        </member>
        <member name="F:HPSocket.Base.Agent.ExtraData">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="E:HPSocket.Base.Agent.OnProxyPrepareConnect">
            <summary>
            代理预连接
            </summary>
        </member>
        <member name="E:HPSocket.Base.Agent.OnProxyConnected">
            <summary>
            代理已连接
            </summary>
        </member>
        <member name="P:HPSocket.Base.Agent.SenderPtr">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.Tag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.Address">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.Async">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.ConnectionTimeout">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.SyncRecvTimeout">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Agent.OnConnect">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Agent.OnSend">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Agent.OnPrepareConnect">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Agent.OnReceive">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Agent.OnClose">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Agent.OnShutdown">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Agent.OnHandShake">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.HasStarted">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.State">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.ConnectionCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.IsSecure">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.MaxConnectionCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.WorkerThreadCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.FreeSocketObjLockTime">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.FreeSocketObjPool">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.FreeBufferObjPool">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.FreeSocketObjHold">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.FreeBufferObjHold">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.IsMarkSilence">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.SendPolicy">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.OnSendSyncPolicy">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.ReuseAddressPolicy">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.ErrorCode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.Version">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.ErrorMessage">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Agent.ProxyList">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.CreateListener">
            <summary>
            创建socket监听和服务组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Agent.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:HPSocket.Base.Agent.Start">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.Stop">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.Wait(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.WaitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.Connect(System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.Connect(System.String,System.UInt16,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.Connect(System.String,System.UInt16,System.IntPtr,System.IntPtr@,System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.Connect(System.String,System.UInt16,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.NativeSetConnectionExtra(System.IntPtr,System.IntPtr)">
            <summary>
            设置附加数据-非托管版本
            </summary>
            <param name="connId"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Agent.NativeGetConnectionExtra(System.IntPtr,System.IntPtr@)">
            <summary>
            获取附加数据--非托管版本
            </summary>
            <param name="connId"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Agent.SetConnectionExtra(System.IntPtr,System.IntPtr)">
            <summary>
            设置附加数据-非托管版本
            </summary>
            <param name="connId"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Agent.GetConnectionExtra(System.IntPtr,System.IntPtr@)">
            <summary>
            获取附加数据--非托管版本
            </summary>
            <param name="connId"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Agent.Send(System.IntPtr,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.Send(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.SendPackets(System.IntPtr,HPSocket.Wsabuf[])">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.Disconnect(System.IntPtr,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.DisconnectLongConnections(System.UInt32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.PauseReceive(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.ResumeReceive(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetReceiveState(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.DisconnectSilenceConnections(System.UInt32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetLocalAddress(System.IntPtr,System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetRemoteAddress(System.IntPtr,System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetPendingDataLength(System.IntPtr,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetConnectPeriod(System.IntPtr,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetSilencePeriod(System.IntPtr,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetAllConnectionIds">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetRemoteHost(System.IntPtr,System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.IsConnected(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.SetExtra(System.IntPtr,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetExtra``1(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.RemoveExtra(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.GetConnectionState(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Agent.SetCallback">
            <summary>
            设置回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Agent.GetRandomProxyServer">
            <summary>
            随机获取代理服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Agent.DelayWaitConnectTimeout(System.IntPtr)">
            <summary>
            延迟等待连接超时
            </summary>
            <param name="connId"></param>
        </member>
        <member name="M:HPSocket.Base.Agent.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HPSocket.Base.Agent.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:HPSocket.Base.Client._disposed">
            <summary>
            是否释放了
            </summary>
        </member>
        <member name="F:HPSocket.Base.Client.ListenerPtr">
            <summary>
            监听对象指针
            </summary>
        </member>
        <member name="P:HPSocket.Base.Client.SenderPtr">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.Tag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.Address">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.Port">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.BindAddress">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.BindPort">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.Async">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.ExtraData">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Client.OnPrepareConnect">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Client.OnConnect">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Client.OnSend">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Client.OnReceive">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Client.OnClose">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Client.OnHandShake">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.FreeBufferPoolSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.FreeBufferPoolHold">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.HasStarted">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.IsConnected">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.State">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.ConnectionId">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.IsSecure">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.PauseReceive">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.ReuseAddressPolicy">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.ErrorCode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.Version">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Client.ErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.CreateListener">
            <summary>
            创建socket监听和服务组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Client.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:HPSocket.Base.Client.Wait(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.WaitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.Connect">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.Connect(System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.Stop">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.Send(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.Send(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.SendPackets(HPSocket.Wsabuf[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.GetPendingDataLength(System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.GetListenAddress(System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.GetRemoteHost(System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Client.SetCallback">
            <summary>
            设置回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Client.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HPSocket.Base.Client.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:HPSocket.Base.Proxy">
            <summary>
            proxy base
            </summary>
        </member>
        <member name="P:HPSocket.Base.Proxy.Host">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:HPSocket.Base.Proxy.Port">
            <summary>
            主机端口
            </summary>
        </member>
        <member name="P:HPSocket.Base.Proxy.UserName">
            <summary>
            帐号
            </summary>
        </member>
        <member name="P:HPSocket.Base.Proxy.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:HPSocket.Base.Proxy.RemoteAddress">
            <summary>
            远程服务器地址
            </summary>
        </member>
        <member name="P:HPSocket.Base.Proxy.RemotePort">
            <summary>
            远程服务器端口
            </summary>
        </member>
        <member name="P:HPSocket.Base.Proxy.UserAgent">
            <summary>
            User-Agent, 只对 http 代理有效
            <para>默认HPSocket.net/2.0</para>
            </summary>
        </member>
        <member name="F:HPSocket.Base.Server._disposed">
            <summary>
            是否释放了
            </summary>
        </member>
        <member name="F:HPSocket.Base.Server.ListenerPtr">
            <summary>
            监听对象指针
            </summary>
        </member>
        <member name="F:HPSocket.Base.Server.ExtraData">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="P:HPSocket.Base.Server.SenderPtr">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.Tag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.Address">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.Port">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Server.OnAccept">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Server.OnSend">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Server.OnPrepareListen">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Server.OnReceive">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Server.OnClose">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Server.OnShutdown">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Base.Server.OnHandShake">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.MaxConnectionCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.WorkerThreadCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.FreeSocketObjLockTime">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.FreeSocketObjPool">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.FreeBufferObjPool">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.FreeSocketObjHold">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.FreeBufferObjHold">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.IsMarkSilence">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.SendPolicy">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.OnSendSyncPolicy">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.ReuseAddressPolicy">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.HasStarted">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.State">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.ConnectionCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.IsSecure">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.ErrorCode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.Version">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Base.Server.ErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.CreateListener">
            <summary>
            创建socket监听和服务组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Server.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:HPSocket.Base.Server.Start">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.Stop">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.Wait(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.WaitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.Send(System.IntPtr,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.Send(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.SendPackets(System.IntPtr,HPSocket.Wsabuf[])">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.Disconnect(System.IntPtr,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.DisconnectLongConnections(System.UInt32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.PauseReceive(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.ResumeReceive(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetReceiveState(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.DisconnectSilenceConnections(System.UInt32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetLocalAddress(System.IntPtr,System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetRemoteAddress(System.IntPtr,System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetPendingDataLength(System.IntPtr,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetListenAddress(System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetConnectPeriod(System.IntPtr,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetSilencePeriod(System.IntPtr,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetAllConnectionIds">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.IsConnected(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.NativeSetConnectionExtra(System.IntPtr,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.NativeGetConnectionExtra(System.IntPtr,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.SetExtra(System.IntPtr,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.GetExtra``1(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.RemoveExtra(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Base.Server.SetCallback">
            <summary>
            设置回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Base.Server.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HPSocket.Base.Server.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:HPSocket.ServerAcceptEventHandler">
            <summary>
            连接进入
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="client">如果为 TCP 连接，pClient为 SOCKET 句柄；如果为 UDP 连接，pClient为 SOCKADDR 指针；</param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ProxyPrepareConnectEventHandler">
            <summary>
            代理预连接
            </summary>
            <param name="sender"></param>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ProxyConnectedEventHandler">
            <summary>
            代理已连接
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ServiceState">
            <summary>
            通信组件服务状态,用程序可以通过通信组件的 GetState() 方法获取组件当前服务状态
            </summary>
        </member>
        <member name="F:HPSocket.ServiceState.Starting">
            <summary>
            正在启动
            </summary>
        </member>
        <member name="F:HPSocket.ServiceState.Started">
            <summary>
            已经启动
            </summary>
        </member>
        <member name="F:HPSocket.ServiceState.Stopping">
            <summary>
            正在停止
            </summary>
        </member>
        <member name="F:HPSocket.ServiceState.Stopped">
            <summary>
            已经启动
            </summary>
        </member>
        <member name="T:HPSocket.SocketOperation">
            <summary>
            Socket 操作类型,应用程序的 OnError() 事件中通过该参数标识是哪种操作导致的错误
            </summary>
        </member>
        <member name="F:HPSocket.SocketOperation.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:HPSocket.SocketOperation.Accept">
            <summary>
            Accept
            </summary>
        </member>
        <member name="F:HPSocket.SocketOperation.Connect">
            <summary>
            Connect
            </summary>
        </member>
        <member name="F:HPSocket.SocketOperation.Send">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:HPSocket.SocketOperation.Receive">
            <summary>
            Receive
            </summary>
        </member>
        <member name="F:HPSocket.SocketOperation.Close">
            <summary>
            Receive
            </summary>
        </member>
        <member name="F:HPSocket.SocketOperation.TimedOut">
            <summary>
            Timed out
            </summary>
        </member>
        <member name="T:HPSocket.HandleResult">
            <summary>
            事件通知处理结果,事件通知的返回值，不同的返回值会影响通信组件的后续行为
            </summary>
        </member>
        <member name="F:HPSocket.HandleResult.Ok">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:HPSocket.HandleResult.Ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:HPSocket.HandleResult.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:HPSocket.SocketError">
            <summary>
            操作结果代码, 组件 Start() / Stop() 方法执行失败时，可通过 ErrorCode() 获取错误代码
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.Ok">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.IllegalState">
            <summary>
            当前状态不允许操作
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.InvalidParam">
            <summary>
            非法参数
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.SocketCreate">
            <summary>
            创建 SOCKET 失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.SocketBind">
            <summary>
            绑定 SOCKET 失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.SocketPrepare">
            <summary>
            设置 SOCKET 失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.SocketListen">
            <summary>
            监听 SOCKET 失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.CpCreate">
            <summary>
            创建完成端口失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.WorkerThreadCreate">
            <summary>
            创建工作线程失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.DetectThreadCreate">
            <summary>
            创建监测线程失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.SocketAttachToCp">
            <summary>
            绑定完成端口失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.ConnectServer">
            <summary>
            连接服务器失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.Network">
            <summary>
            网络错误
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.DataProc">
            <summary>
            数据处理错误
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.DataSend">
            <summary>
            数据发送失败
            </summary>
        </member>
        <member name="F:HPSocket.SocketError.SslEnvNotReady">
            <summary>
            SSL 环境未就绪
            </summary>
        </member>
        <member name="T:HPSocket.ReceiveState">
            <summary>
            接收状态
            </summary>
        </member>
        <member name="F:HPSocket.ReceiveState.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:HPSocket.ReceiveState.Resume">
            <summary>
            唤醒状态
            </summary>
        </member>
        <member name="F:HPSocket.ReceiveState.Pause">
            <summary>
            暂停状态
            </summary>
        </member>
        <member name="T:HPSocket.SendPolicy">
            <summary>
            发送策略
            </summary>
        </member>
        <member name="F:HPSocket.SendPolicy.Pack">
            <summary>
            打包模式（默认）
            </summary>
        </member>
        <member name="F:HPSocket.SendPolicy.Safe">
            <summary>
            安全模式
            </summary>
        </member>
        <member name="F:HPSocket.SendPolicy.Direct">
            <summary>
            直接模式
            </summary>
        </member>
        <member name="T:HPSocket.OnSendSyncPolicy">
            <summary>
            OnSend 事件同步策略
            <para>Server 组件和 Agent 组件的 OnSend 事件同步策略</para>
            </summary>
        </member>
        <member name="F:HPSocket.OnSendSyncPolicy.None">
            <summary>
            不同步（默认）	：不同步 OnSend 事件，此时可能同时触发 OnReceive 和 OnClose 事件
            </summary>
        </member>
        <member name="F:HPSocket.OnSendSyncPolicy.Close">
            <summary>
            同步 OnClose	：只同步 OnClose 事件，此时可能同时触发 OnReceive 事件
            </summary>
        </member>
        <member name="F:HPSocket.OnSendSyncPolicy.Receive">
            <summary>
            同步 OnReceive	：（只用于 TCP 组件）同步 OnReceive 和 OnClose 事件，此处不可能同时触发 OnReceive 或 OnClose 事件
            </summary>
        </member>
        <member name="T:HPSocket.ProxyType">
            <summary>
            代理类型
            </summary>
        </member>
        <member name="F:HPSocket.ProxyType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:HPSocket.ProxyType.Http">
            <summary>
            http
            </summary>
        </member>
        <member name="F:HPSocket.ProxyType.Socks5">
            <summary>
            socks5
            </summary>
        </member>
        <member name="T:HPSocket.ReuseAddressPolicy">
            <summary>
            地址重用选项
            <para>通信组件底层 socket 的地址重用选项</para>
            </summary>
        </member>
        <member name="F:HPSocket.ReuseAddressPolicy.None">
            <summary>
            不重用
            </summary>
        </member>
        <member name="F:HPSocket.ReuseAddressPolicy.AddressOnly">
            <summary>
            仅重用地址
            </summary>
        </member>
        <member name="F:HPSocket.ReuseAddressPolicy.AddressAndPort">
            <summary>
            重用地址和端口
            </summary>
        </member>
        <member name="M:HPSocket.WebSocketExtensions.IsPredefinedScheme(System.String)">
            <summary>
            Determines whether the specified string is a predefined scheme.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is a predefined scheme;
            otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
        </member>
        <member name="M:HPSocket.WebSocketExtensions.ToUri(System.String)">
            <summary>
            Determines whether the specified string is a URI string.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> may be a URI string;
            otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
        </member>
        <member name="M:HPSocket.WebSocketExtensions.TryCreateWebSocketUri(System.String,System.Uri@,System.String@)">
            <summary>
            Tries to create a new <see cref="T:System.Uri"/> for WebSocket with
            the specified <paramref name="uriString"/>.
            </summary>
            <returns>
            <c>true</c> if the <see cref="T:System.Uri"/> was successfully created;
            otherwise, <c>false</c>.
            </returns>
            <param name="uriString">
            A <see cref="T:System.String"/> that represents a WebSocket URL to try.
            </param>
            <param name="result">
            When this method returns, a <see cref="T:System.Uri"/> that
            represents the WebSocket URL or <see langword="null"/>
            if <paramref name="uriString"/> is invalid.
            </param>
            <param name="message">
            When this method returns, a <see cref="T:System.String"/> that
            represents an error message or <see langword="null"/>
            if <paramref name="uriString"/> is valid.
            </param>
        </member>
        <member name="M:HPSocket.WebSocketExtensions.ToString``1(``0[],System.String)">
            <summary>
            Converts the specified array to a string.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> converted by concatenating each element of
              <paramref name="array"/> across <paramref name="separator"/>.
              </para>
              <para>
              An empty string if <paramref name="array"/> is an empty array.
              </para>
            </returns>
            <param name="array">
            An array of T to convert.
            </param>
            <param name="separator">
            A <see cref="T:System.String"/> used to separate each element of
            <paramref name="array"/>.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:HPSocket.HttpEasyDataExtensions.HttpMessageDataDecompress(System.Byte[],System.String)">
            <summary>
            http message data decompress
            </summary>
            <param name="data"></param>
            <param name="contentEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.NativeExtraExtensions">
            <summary>
            非托管附加数据扩展
            </summary>
        </member>
        <member name="F:HPSocket.NativeExtraExtensions.ReferenceData">
            <summary>
            伪引用计数
            </summary>
        </member>
        <member name="M:HPSocket.NativeExtraExtensions.ToIntPtr(HPSocket.NativeExtra)">
            <summary>
            结构体转 int ptr, 必须调用 IntPtr.FreeNativeExtraIntPtr()
            </summary>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.NativeExtraExtensions.ToNativeExtra(System.IntPtr)">
            <summary>
            IntPtr转NativeExtra
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.NativeExtraExtensions.FreeNativeExtraIntPtr(System.IntPtr)">
            <summary>
            释放由NativeExtra.ToIntPtr()申请的内存
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="T:HPSocket.HttpMethodExtensions">
            <summary>
            HttpMethod 扩展
            </summary>
        </member>
        <member name="M:HPSocket.HttpMethodExtensions.ToNameString(HPSocket.Http.HttpMethod)">
            <summary>
            到名称
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.HttpStatusCodeExtensions">
            <summary>
            HttpStatusCode 扩展
            </summary>
        </member>
        <member name="M:HPSocket.HttpStatusCodeExtensions.ToUInt16(HPSocket.Http.HttpStatusCode)">
            <summary>
            到短正整数
            </summary>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.HttpStatusCodeExtensions.ToNameString(HPSocket.Http.HttpStatusCode)">
            <summary>
            到名称
            </summary>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IntPtrExtensions">
            <summary>
            IntPtr 扩展
            </summary>
        </member>
        <member name="M:HPSocket.IntPtrExtensions.PtrToAnsiString(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="T:HPSocket.ConnectionStateExtensions">
            <summary>
            连接状态扩展
            </summary>
        </member>
        <member name="M:HPSocket.ConnectionStateExtensions.InvalidValue(HPSocket.Tcp.TcpConnectionState)">
            <summary>
            是否有效的状态值
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ConnectionStateExtensions.InvalidValue(System.IntPtr)">
            <summary>
            是否有效的状态值
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.BytesExtensions">
            <summary>
            bytes扩展
            </summary>
        </member>
        <member name="M:HPSocket.BytesExtensions.IndexesOf(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            查找bytes
            <remarks>Boyer-Moore-Horspool 搜索, 来自 https://blog.csdn.net/lindexi_gd/article/details/100174714 </remarks>
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.BoyerMoore">
            <summary>
            Boyer-Moore
            <remarks>BoyerMoore类来自 https://gist.github.com/mjs3339/0772431281093f1bca1fce2f2eca527d</remarks>
            </summary>
        </member>
        <member name="M:HPSocket.ExtraData`2.ContainsKey(`0)">
            <summary>
            是否包含key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ExtraData`2.Get(`0)">
            <summary>
            获取附加数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ExtraData`2.Set(`0,`1)">
            <summary>
            设置附加数据
            
            </summary>
            <param name="key"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ExtraData`2.Remove(`0)">
            <summary>
            删除附加数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ExtraData`2.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="T:HPSocket.InitializationException">
            <summary>
            初始化异常
            </summary>
        </member>
        <member name="T:HPSocket.NativeExtra">
            <summary>
            非托管内存附加数据
            </summary>
        </member>
        <member name="F:HPSocket.NativeExtra.TcpConnectionState">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="F:HPSocket.NativeExtra.ProxyConnectionState">
            <summary>
            代理连接状态
            </summary>
        </member>
        <member name="F:HPSocket.NativeExtra.ProxyConnectionFlag">
            <summary>
            代理连接标记
            </summary>
        </member>
        <member name="F:HPSocket.NativeExtra.UserExtra">
            <summary>
            用户的附加数据
            </summary>
        </member>
        <member name="T:HPSocket.Wsabuf">
            <summary>
            wsabuf
            </summary>
        </member>
        <member name="T:HPSocket.NameValue">
            <summary>
            Name/Value 结构体
            字符串名值对结构体
            </summary>
        </member>
        <member name="T:HPSocket.NameValueIntPtr">
            <summary>
            Name/Value 结构体
            字符串名值对结构体
            </summary>
        </member>
        <member name="T:HPSocket.Http.CookieManager">
            <summary>
            cookie 管理器
            </summary>
        </member>
        <member name="M:HPSocket.Http.CookieManager.LoadFromFile(System.String,System.Boolean)">
            <summary>
            从文件加载 Cookie
            </summary>
            <param name="filePath"></param>
            <param name="keepExists"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.SaveToFile(System.String,System.Boolean)">
            <summary>
            保存 Cookie 到文件
            </summary>
            <param name="filePath"></param>
            <param name="keepExists"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.ClearCookies(System.String,System.String)">
            <summary>
            清理 Cookie
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.RemoveExpiredCookies(System.String,System.String)">
            <summary>
            清理过期 Cookie
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.SetCookie(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            设置 Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="domain"></param>
            <param name="path"></param>
            <param name="maxAge"></param>
            <param name="httpOnly"></param>
            <param name="secure"></param>
            <param name="sameSite"></param>
            <param name="onlyUpdateValueIfExists"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.DeleteCookie(System.String,System.String,System.String)">
            <summary>
            删除 Cookie
            </summary>
            <param name="domain"></param>
            <param name="path"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:HPSocket.Http.CookieManager.IsEnableThirdPartyCookie">
            <summary>
            获取或设置是否允许第三方 Cookie
            </summary>
        </member>
        <member name="M:HPSocket.Http.CookieManager.ParseExpires(System.String,System.UInt64@)">
            <summary>
            Cookie expires 字符串转换为整数
            </summary>
            <param name="str"></param>
            <param name="expires"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.MakeExpiresStr(System.UInt64,System.String@)">
            <summary>
            整数转换为 Cookie expires 字符串
            </summary>
            <param name="val"></param>
            <param name="expires"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.ToString(System.String@,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            生成 Cookie 字符串
            </summary>
            <param name="cookie"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="domain"></param>
            <param name="path"></param>
            <param name="maxAge"></param>
            <param name="httpOnly"></param>
            <param name="secure"></param>
            <param name="sameSite"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.CurrentUtcTime">
            <summary>
            获取当前 UTC 时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.MaxAgeToExpires(System.Int32)">
            <summary>
            Max-Age 到 expires
            </summary>
            <param name="maxAge"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.CookieManager.MaxAgeToExpires(System.UInt64)">
            <summary>
            expires 到 Max-Age
            </summary>
            <param name="expires"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.Http.HttpVersion">
            <summary>
            http版本号
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpVersion.v1_0">
            <summary>
            http 1.0
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpVersion.v1_1">
            <summary>
            http 1.1
            </summary>
        </member>
        <member name="T:HPSocket.Http.HttpUrlField">
            <summary>
            URL 域, HTTP 请求行中 URL 段位的域定义
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpUrlField.Max">
            <summary>
            Field Count
            </summary>
        </member>
        <member name="T:HPSocket.Http.HttpParseResult">
            <summary>
            HTTP 解析结果标识, 指示 HTTP 解析器是否继续执行解析操作
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpParseResult.Error">
            <summary>
            终止解析，断开连接
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpParseResult.Ok">
            <summary>
            继续解析
            </summary>
        </member>
        <member name="T:HPSocket.Http.HttpParseResultEx">
            <summary>
            HTTP 解析结果标识, 指示 HTTP 解析器是否继续执行解析操作
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpParseResultEx.Error">
            <summary>
            终止解析，断开连接
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpParseResultEx.Ok">
            <summary>
            继续解析
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpParseResultEx.SkipBody">
            <summary>
            跳过当前请求 BODY
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpParseResultEx.Upgrade">
            <summary>
            升级协议
            </summary>
        </member>
        <member name="T:HPSocket.Http.HttpUpgradeType">
            <summary>
            http upgrade type
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpUpgradeType.None">
            <summary>
            没有升级
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpUpgradeType.WebSocket">
            <summary>
            WebSocket
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpUpgradeType.HttpTunnel">
            <summary>
            HTTP 隧道
            </summary>
        </member>
        <member name="F:HPSocket.Http.HttpUpgradeType.Unknown">
            <summary>
            未知类型
            </summary>
        </member>
        <member name="T:HPSocket.Http.HttpStatusCode">
            <summary>
            http status code
            </summary>
        </member>
        <member name="T:HPSocket.Http.HttpMethod">
            <summary>
            HttpMethod
            </summary>
        </member>
        <member name="P:HPSocket.Http.HttpAgent.HttpAutoStart">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpAgent.LocalVersion">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpAgent.IsUseCookie">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnMessageBegin">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnChunkHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnChunkComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnUpgrade">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnStatusLine">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnHeadersComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnBody">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnMessageComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnParseError">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnWsMessageHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnWsMessageBody">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpAgent.OnWsMessageComplete">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendRequest(System.IntPtr,HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendSmallFile(System.IntPtr,System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <summary>
            http agent 不实现当前方法, 请调用带HttpMethod版本的SendSmallFile方法
            </summary>
            <param name="connId"></param>
            <param name="filePath"></param>
            <param name="head"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendSmallFile(System.IntPtr,System.String,System.Byte[],System.Byte[])">
            <summary>
            http server 不实现当前方法, 请调用带HttpMethod版本的SendSmallFile方法
            </summary>
            <param name="connId"></param>
            <param name="filePath"></param>
            <param name="head"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendSmallFile(System.IntPtr,HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendChunkData(System.IntPtr,System.Byte[],System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendWsMessage(System.IntPtr,HPSocket.WebSocket.MessageState,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendWsMessage(System.IntPtr,System.Boolean,HPSocket.WebSocket.Rsv,HPSocket.WebSocket.OpCode,System.Byte[],System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendPost(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendPut(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendPatch(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendGet(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendDelete(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendHead(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendTrace(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendOptions(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.SendConnect(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.StartHttp(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetWsMessageState(System.IntPtr,HPSocket.WebSocket.MessageState@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetStatusCode(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.IsUpgrade(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.IsKeepAlive(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetVersion(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetContentLength(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetContentType(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetContentEncoding(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetTransferEncoding(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetUpgradeType(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetParseErrorInfo(System.IntPtr,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetHeader(System.IntPtr,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetHeaders(System.IntPtr,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetAllHeaders(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetAllHeaderNames(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetCookie(System.IntPtr,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpAgent.GetAllCookies(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpClient.HttpAutoStart">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpClient.LocalVersion">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpClient.IsUseCookie">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnMessageBegin">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnChunkHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnChunkComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnUpgrade">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnStatusLine">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnHeadersComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnBody">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnMessageComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnParseError">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnWsMessageHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnWsMessageBody">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpClient.OnWsMessageComplete">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendRequest(HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendSmallFile(System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <summary>
            http agent 不实现当前方法, 请调用带HttpMethod版本的SendSmallFile方法
            </summary>
            <param name="filePath"></param>
            <param name="head"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendSmallFile(System.String,System.Byte[],System.Byte[])">
            <summary>
            http server 不实现当前方法, 请调用带HttpMethod版本的SendSmallFile方法
            </summary>
            <param name="filePath"></param>
            <param name="head"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendSmallFile(HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendChunkData(System.Byte[],System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendWsMessage(HPSocket.WebSocket.MessageState,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendPost(System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendPut(System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendPatch(System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendGet(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendDelete(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendHead(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendTrace(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendOptions(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.SendConnect(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetWsMessageState(HPSocket.WebSocket.MessageState@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.StartHttp">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetStatusCode">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.IsUpgrade">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.IsKeepAlive">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetVersion">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetContentLength">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetContentType">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetContentEncoding">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetTransferEncoding">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetUpgradeType">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetParseErrorInfo(System.String@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetHeader(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetHeaders(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetAllHeaders">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetAllHeaderNames">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetCookie(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpClient.GetAllCookies">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpEasyAgent.AutoDecompression">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyAgent.OnEasyChunkData">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyAgent.OnEasyMessageData">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyAgent.OnEasyWebSocketMessageData">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpEasyAgent.SdkOnClose(System.IntPtr,System.IntPtr,HPSocket.SocketOperation,System.Int32)">
            <summary>
            OnClose重写用来释放资源, 该事件会继续触发
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="socketOperation"></param>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="P:HPSocket.Http.HttpEasyClient.AutoDecompression">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyClient.OnEasyChunkData">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyClient.OnEasyMessageData">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyClient.OnEasyWebSocketMessageData">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpEasyServer.AutoDecompression">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyServer.OnEasyChunkData">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyServer.OnEasyMessageData">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpEasyServer.OnEasyWebSocketMessageData">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpEasyServer.SdkOnClose(System.IntPtr,System.IntPtr,HPSocket.SocketOperation,System.Int32)">
            <summary>
            OnClose重写用来释放资源, 该事件会继续触发
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="socketOperation"></param>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="P:HPSocket.Http.HttpsAgent.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="P:HPSocket.Http.HttpsAgent.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsAgent.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsAgent.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsAgent.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsAgent.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsAgent.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsAgent.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsAgent.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsAgent.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsAgent.StartHandShake(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsAgent.GetSessionInfo(System.IntPtr,HPSocket.Ssl.SslSessionInfo,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsAgent.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:HPSocket.Http.HttpsClient.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="P:HPSocket.Http.HttpsClient.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsClient.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsClient.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsClient.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsClient.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsClient.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsClient.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsClient.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsClient.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsClient.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:HPSocket.Http.HttpsEasyAgent.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="P:HPSocket.Http.HttpsEasyAgent.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyAgent.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyAgent.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyAgent.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyAgent.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyAgent.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyAgent.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyAgent.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyAgent.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyAgent.StartHandShake(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyAgent.GetSessionInfo(System.IntPtr,HPSocket.Ssl.SslSessionInfo,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyAgent.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:HPSocket.Http.HttpsEasyClient.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="P:HPSocket.Http.HttpsEasyClient.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyClient.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyClient.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyClient.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyClient.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyClient.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyClient.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyClient.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyClient.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyClient.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:HPSocket.Http.HttpsEasyServer.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="P:HPSocket.Http.HttpsEasyServer.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyServer.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyServer.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyServer.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyServer.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyServer.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsEasyServer.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyServer.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyServer.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsEasyServer.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:HPSocket.Http.HttpServer.HttpAutoStart">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpServer.LocalVersion">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpServer.ReleaseDelay">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnMessageBegin">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnChunkHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnChunkComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnUpgrade">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnRequestLine">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnHeadersComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnBody">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnMessageComplete">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnParseError">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnWsMessageHeader">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnWsMessageBody">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Http.HttpServer.OnWsMessageComplete">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.SendResponse(System.IntPtr,HPSocket.Http.HttpStatusCode,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.SendResponse(System.IntPtr,HPSocket.Http.HttpStatusCode,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.SendSmallFile(System.IntPtr,System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <summary>
            http server 不实现当前方法, 请调用带HttpStatusCode版本的SendSmallFile方法
            </summary>
            <param name="connId"></param>
            <param name="filePath"></param>
            <param name="head"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.HttpServer.SendSmallFile(System.IntPtr,System.String,System.Byte[],System.Byte[])">
            <summary>
            http server 不实现当前方法, 请调用带HttpStatusCode版本的SendSmallFile方法
            </summary>
            <param name="connId"></param>
            <param name="filePath"></param>
            <param name="head"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Http.HttpServer.SendSmallFile(System.IntPtr,HPSocket.Http.HttpStatusCode,System.Collections.Generic.List{HPSocket.NameValue},System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.SendChunkData(System.IntPtr,System.Byte[],System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.SendWsMessage(System.IntPtr,HPSocket.WebSocket.MessageState,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.SendWsMessage(System.IntPtr,System.Boolean,HPSocket.WebSocket.Rsv,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetWsMessageState(System.IntPtr,HPSocket.WebSocket.MessageState@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.IsUpgrade(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.IsKeepAlive(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetVersion(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetContentLength(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetContentType(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetContentEncoding(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetTransferEncoding(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetUpgradeType(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetParseErrorInfo(System.IntPtr,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetHeader(System.IntPtr,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetHeaders(System.IntPtr,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetAllHeaders(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetAllHeaderNames(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetCookie(System.IntPtr,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetAllCookies(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetHost(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.Release(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.StartHttp(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetUrlField(System.IntPtr,HPSocket.Http.HttpUrlField)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetUrlFieldSet(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpServer.GetMethod(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsServer.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="P:HPSocket.Http.HttpsServer.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsServer.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsServer.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsServer.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsServer.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsServer.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpsServer.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsServer.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsServer.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpsServer.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:HPSocket.Http.HttpSyncClient.AutoDecompression">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpSyncClient.ResponseEncoding">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpSyncClient.ConnectTimeout">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Http.HttpSyncClient.RequestTimeout">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpSyncClient.OpenUrl(HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpSyncClient.CleanupRequestResult">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Http.HttpSyncClient.GetResponseBody">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.IAgent">
            <summary>
            agent 基础接口
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.Address">
            <summary>
            监听地址，默认0.0.0.0
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.Async">
            <summary>
            是否异步连接，默认为真
            <exception cref="T:System.InvalidOperationException">启动服务后设置此属性会引发此异常</exception>
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.ConnectionTimeout">
            <summary>
            连接超时时间, 默认操作系统默认值
            <para>单位: 毫秒</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">同步连接、.NET Framework2.0以及设置小于100毫秒会引发此异常</exception>
        </member>
        <member name="P:HPSocket.IAgent.SyncRecvTimeout">
            <summary>
            同步接收超时, 默认操作系统默认值
            <para>只对同步连接有用</para>
            <para>单位: 毫秒</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">异步连接、小于100毫秒会引发此异常</exception>
        </member>
        <member name="E:HPSocket.IAgent.OnConnect">
            <summary>
            连接到达事件
            </summary>
        </member>
        <member name="E:HPSocket.IAgent.OnSend">
            <summary>
            数据包发送事件
            </summary>
        </member>
        <member name="E:HPSocket.IAgent.OnPrepareConnect">
            <summary>
            准备监听了事件
            </summary>
        </member>
        <member name="E:HPSocket.IAgent.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="E:HPSocket.IAgent.OnClose">
            <summary>
            连接关闭事件
            </summary>
        </member>
        <member name="E:HPSocket.IAgent.OnShutdown">
            <summary>
            客户端停止事件
            </summary>
        </member>
        <member name="E:HPSocket.IAgent.OnHandShake">
            <summary>
            握手事件
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.HasStarted">
            <summary>
            获取是否启动
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.State">
            <summary>
            获取状态
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.ConnectionCount">
            <summary>
            获取连接数
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.IsSecure">
            <summary>
            是否为安全连接（SSL/HTTPS）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.MaxConnectionCount">
            <summary>
            设置最大连接数（组件会根据设置值预分配内存，因此需要根据实际情况设置，不宜过大）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.WorkerThreadCount">
            <summary>
            读取或设置工作线程数量（通常设置为 2 * CPU + 2）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.FreeSocketObjLockTime">
            <summary>
            读取或设置 Socket 缓存对象锁定时间（毫秒，在锁定期间该 Socket 缓存对象不能被获取使用）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.FreeSocketObjPool">
            <summary>
            读取或设置 Socket 缓存池大小（通常设置为平均并发连接数量的 1/3 - 1/2）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.FreeBufferObjPool">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.FreeSocketObjHold">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.FreeBufferObjHold">
            <summary>
            读取或设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.IsMarkSilence">
            <summary>
            读取或设置是否标记静默时间（设置为 true 时 DisconnectSilenceConnections() 和 GetSilencePeriod() 才有效，默认：false）
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.SendPolicy">
            <summary>
            获取或设置数据发送策略
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.OnSendSyncPolicy">
            <summary>
            获取或设置 OnSend 事件同步策略
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.ReuseAddressPolicy">
            <summary>
            获取或设置地址重用选项
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.ErrorMessage">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="P:HPSocket.IAgent.ProxyList">
            <summary>
            socks5 代理列表
            </summary>
        </member>
        <member name="M:HPSocket.IAgent.Start">
            <summary>
            启动服务
            <exception cref="T:System.InvalidOperationException">BindAddress未设置会引发此异常</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.Stop">
            <summary>
            停止服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.Connect(System.String,System.UInt16)">
            <summary>
            连接到远程服务器
            </summary>
            <param name="address">远程服务器地址</param>
            <param name="port">远程服务器端口</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.Connect(System.String,System.UInt16,System.IntPtr@)">
            <summary>
            连接到远程服务器
            </summary>
            <param name="address">远程服务器地址</param>
            <param name="port">远程服务器端口</param>
            <param name="connId">连接id</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.Connect(System.String,System.UInt16,System.IntPtr,System.IntPtr@,System.String,System.UInt16)">
            <summary>
            连接到远程服务器并附带附加数据, 另可附带本地地址及端口, 默认为空不带
            </summary>
            <param name="address">远程服务器地址</param>
            <param name="port">远程服务器端口</param>
            <param name="extra">附加数据, 在回调事件中使用GetConnectionExtra()获取
            <para>附加托管对象时候可能需使用GCHandle固定托管对象地址, 使用方法参考微软官方文档:
            <see>
                <cref>https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.interopservices.gchandle.addrofpinnedobject?view=netframework-4.8#System_Runtime_InteropServices_GCHandle_AddrOfPinnedObject</cref>
            </see>
            </para>
            </param>
            <param name="connId">连接id</param>
            <param name="localAddress">要绑定的本地地址</param>
            <param name="localPort">要绑定的本地端口</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.Connect(System.String,System.UInt16,System.IntPtr)">
            <summary>
            连接到远程服务器并附带附加数据
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="extra">附加数据, 在回调事件中使用GetConnectionExtra()获取
            <para>附加托管对象时候可能需使用GCHandle固定托管对象地址, 使用方法参考微软官方文档:
            <see>
                <cref>https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.interopservices.gchandle.addrofpinnedobject?view=netframework-4.8#System_Runtime_InteropServices_GCHandle_AddrOfPinnedObject</cref>
            </see>
            </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.SetConnectionExtra(System.IntPtr,System.IntPtr)">
            <summary>
            设置连接附加数据, 非托管版本, hp-socket自带方法；【使用此方法不支持异步连接超时时间，且不支持连接状态获取】；非特殊需求不要使用这个方法, 请直接使用 SetExtra();
            <para>附加托管对象时候可能需使用GCHandle固定托管对象地址, 使用方法参考微软官方文档:
            <see>
                <cref>https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.interopservices.gchandle.addrofpinnedobject?view=netframework-4.8#System_Runtime_InteropServices_GCHandle_AddrOfPinnedObject</cref>
            </see>
            </para>
            </summary>
            <param name="connId"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetConnectionExtra(System.IntPtr,System.IntPtr@)">
            <summary>
            获取连接附加数据, 非托管版本, hp-socket自带方法；【使用此方法不支持异步连接超时时间，且不支持连接状态获取】 非特殊需求不要使用这个方法, 请直接使用 GetExtra();
            </summary>
            <param name="connId"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.Send(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bytes"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.Send(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bytes"></param>
            <param name="offset">针对bytes的偏移</param>
            <param name="length">发多大</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.SendPackets(System.IntPtr,HPSocket.Wsabuf[])">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="connId">连接 ID</param>
            <param name="buffers">发送缓冲区数组</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:HPSocket.IAgent.Disconnect(System.IntPtr,System.Boolean)">
            <summary>
            断开某个的连接
            </summary>
            <param name="connId"></param>
            <param name="force">是否强制断开</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.DisconnectLongConnections(System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时间的连接
            </summary>
            <param name="period">毫秒</param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.PauseReceive(System.IntPtr)">
            <summary>
            暂停接收
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.ResumeReceive(System.IntPtr)">
            <summary>
            唤醒接收
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetReceiveState(System.IntPtr)">
            <summary>
            获取连接的接收状态
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.DisconnectSilenceConnections(System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时长的静默连接
            </summary>
            <param name="period">毫秒</param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetLocalAddress(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的本地地址信息
            </summary>
            <param name="connId"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetRemoteAddress(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的远程地址信息
            </summary>
            <param name="connId"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetPendingDataLength(System.IntPtr,System.Int32@)">
            <summary>
            获取连接中未发出数据的长度
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetConnectPeriod(System.IntPtr,System.UInt32@)">
            <summary>
            获取指定连接的连接时长（毫秒）
            </summary>
            <param name="connId"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetSilencePeriod(System.IntPtr,System.UInt32@)">
            <summary>
            获取某个连接静默时间（毫秒）
            </summary>
            <param name="connId"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetAllConnectionIds">
            <summary>
            获取所有连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetRemoteHost(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的远程主机信息
            </summary>
            <param name="connId"></param>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.IsConnected(System.IntPtr)">
            <summary>
            检测是否有效连接
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.SetExtra(System.IntPtr,System.Object)">
            <summary>
            设置附加数据
            </summary>
            <param name="connId"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetExtra``1(System.IntPtr)">
            <summary>
            获取附加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.RemoveExtra(System.IntPtr)">
            <summary>
            删除附加数据
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IAgent.GetConnectionState(System.IntPtr)">
            <summary>
            获取连接状态
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IClient">
            <summary>
            client 基础接口
            </summary>
        </member>
        <member name="P:HPSocket.IClient.Address">
            <summary>
            远程服务器地址
            </summary>
        </member>
        <member name="P:HPSocket.IClient.Port">
            <summary>
            远程服务器端口
            </summary>
        </member>
        <member name="P:HPSocket.IClient.BindAddress">
            <summary>
            本地绑定到哪个ip
            </summary>
        </member>
        <member name="P:HPSocket.IClient.BindPort">
            <summary>
            本地绑定到哪个端口
            </summary>
        </member>
        <member name="P:HPSocket.IClient.Async">
            <summary>
            是否异步连接，默认为真
            </summary>
        </member>
        <member name="P:HPSocket.IClient.ExtraData">
            <summary>
            附加数据
            <para>赋值：client.ExtraData = myObj;</para>
            <para>取值：var data = ExtraData as MyData;</para>
            </summary>
        </member>
        <member name="E:HPSocket.IClient.OnPrepareConnect">
            <summary>
            准备连接了事件
            </summary>
        </member>
        <member name="E:HPSocket.IClient.OnConnect">
            <summary>
            连接事件
            </summary>
        </member>
        <member name="E:HPSocket.IClient.OnSend">
            <summary>
            数据发送事件
            </summary>
        </member>
        <member name="E:HPSocket.IClient.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="E:HPSocket.IClient.OnClose">
            <summary>
            连接关闭事件
            </summary>
        </member>
        <member name="E:HPSocket.IClient.OnHandShake">
            <summary>
            握手事件
            </summary>
        </member>
        <member name="P:HPSocket.IClient.FreeBufferPoolSize">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 -> PUSH 模型：5 - 10；PULL 模型：10 - 20 ）
            </summary>
        </member>
        <member name="P:HPSocket.IClient.FreeBufferPoolHold">
            <summary>
             读取或设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
        </member>
        <member name="P:HPSocket.IClient.HasStarted">
            <summary>
            检查通信组件是否已启动
            </summary>
        </member>
        <member name="P:HPSocket.IClient.IsConnected">
            <summary>
            是否已连接
            </summary>
        </member>
        <member name="P:HPSocket.IClient.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:HPSocket.IClient.ConnectionId">
            <summary>
            获取该组件对象的连接Id
            </summary>
        </member>
        <member name="P:HPSocket.IClient.IsSecure">
            <summary>
            是否为安全连接（SSL/HTTPS）
            </summary>
        </member>
        <member name="P:HPSocket.IClient.PauseReceive">
            <summary>
            获取或设置暂停接收状态，设置状态时，不允许设置为ReceiveState.Unknown，
            </summary>
        </member>
        <member name="P:HPSocket.IClient.ReuseAddressPolicy">
            <summary>
            获取或设置地址重用选项
            </summary>
        </member>
        <member name="P:HPSocket.IClient.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="P:HPSocket.IClient.ErrorMessage">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="M:HPSocket.IClient.Connect">
            <summary>
            启动通讯组件并连接到服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IClient.Connect(System.String,System.UInt16)">
            <summary>
            启动通讯组件并连接到服务器
            </summary>
            <param name="address">远程服务器地址</param>
            <param name="port">远程服务器端口</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IClient.Stop">
            <summary>
            停止服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IClient.Send(System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="bytes"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="bytes"></param>
            <param name="offset">针对bytes的偏移</param>
            <param name="length">发多大</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IClient.SendPackets(HPSocket.Wsabuf[],System.Int32)">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="buffers">发送缓冲区数组</param>
            <param name="count">发送缓冲区数目</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:HPSocket.IClient.GetPendingDataLength(System.Int32@)">
            <summary>
            获取连接中未发出数据的长度
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IClient.GetListenAddress(System.String@,System.UInt16@)">
            <summary>
            获取监听socket的地址信息
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IClient.GetRemoteHost(System.String@,System.UInt16@)">
            <summary>
            获取连接的远程主机信息
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IHttp">
            <summary>
            http server/agent/client 的公共接口
            </summary>
        </member>
        <member name="P:HPSocket.IHttp.HttpAutoStart">
            <summary>
            获取或设置 HTTP 启动方式, 默认为true
            </summary>
        </member>
        <member name="P:HPSocket.IHttp.LocalVersion">
            <summary>
            获取或设置本地协议版本
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnMessageBegin">
            <summary>
            【可选】开始解析
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnHeader">
            <summary>
            【可选】请求头通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnChunkHeader">
            <summary>
            【可选】Chunked 报文头通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnChunkComplete">
            <summary>
            【可选】Chunked 报文结束通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnUpgrade">
            <summary>
            【可选】升级协议通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnHeadersComplete">
            <summary>
            【必须】请求头完成通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnBody">
            <summary>
            【必须】请求体报文通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnMessageComplete">
            <summary>
            【必须】完成解析通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnParseError">
            <summary>
            【必须】解析错误通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnWsMessageHeader">
            <summary>
            【必须】WebSocket数据头通知
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnWsMessageBody">
            <summary>
            【必须】WebSocket数据包体通知(byte)
            </summary>
        </member>
        <member name="E:HPSocket.IHttp.OnWsMessageComplete">
            <summary>
            【必须】WebSocket数据完成解析通知
            </summary>
        </member>
        <member name="T:HPSocket.IHttpAgent">
            <summary>
            http agent
            </summary>
        </member>
        <member name="P:HPSocket.IHttpAgent.IsUseCookie">
            <summary>
            获取或设置是否使用 Cookie
            </summary>
        </member>
        <member name="E:HPSocket.IHttpAgent.OnStatusLine">
            <summary>
            【可选】状态行解析完成（仅用于 HTTP 客户端）
            </summary>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendWsMessage(System.IntPtr,System.Boolean,HPSocket.WebSocket.Rsv,HPSocket.WebSocket.OpCode,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            发送web socket消息
            </summary>
            <param name="connId"></param>
            <param name="final"></param>
            <param name="rsv"></param>
            <param name="opCode"></param>
            <param name="mask"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendRequest(System.IntPtr,HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="connId"></param>
            <param name="method">http method</param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendSmallFile(System.IntPtr,HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String)">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="connId"></param>
            <param name="method"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendPost(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <summary>
            发送 POST 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendPut(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <summary>
            发送 PUT 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendPatch(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <summary>
            发送 PATCH 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendGet(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 GET 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendDelete(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 DELETE 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendHead(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 HEAD 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendTrace(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 TRACE 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendOptions(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 OPTIONS 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.SendConnect(System.IntPtr,System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 CONNECT 请求
            </summary>
            <param name="connId"></param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpAgent.GetStatusCode(System.IntPtr)">
            <summary>
            获取 HTTP 状态码
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IHttpClient">
            <summary>
            http client
            </summary>
        </member>
        <member name="P:HPSocket.IHttpClient.IsUseCookie">
            <summary>
            获取或设置是否使用 Cookie
            </summary>
        </member>
        <member name="E:HPSocket.IHttpClient.OnStatusLine">
            <summary>
            【可选】状态行解析完成（仅用于 HTTP 客户端）
            </summary>
        </member>
        <member name="M:HPSocket.IHttpClient.SendRequest(HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="method">http method</param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendSmallFile(HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String)">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendChunkData(System.Byte[],System.Int32,System.String)">
            <summary>
            向对端发送 Chunked 数据分片
            </summary>
            <param name="data">Chunked 数据分片</param>
            <param name="length">数据分片长度（为 0 表示结束分片）</param>
            <param name="extensions">扩展属性（默认：null）</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendWsMessage(HPSocket.WebSocket.MessageState,System.Byte[],System.Int32)">
            <summary>
            发送web socket消息
            </summary>
            <param name="state"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendPost(System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <summary>
            发送 POST 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendPut(System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <summary>
            发送 PUT 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendPatch(System.String,System.Collections.Generic.List{HPSocket.NameValue},System.String,System.Int32)">
            <summary>
            发送 PATCH 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendGet(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 GET 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendDelete(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 DELETE 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendHead(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 HEAD 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendTrace(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 TRACE 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendOptions(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 OPTIONS 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.SendConnect(System.String,System.Collections.Generic.List{HPSocket.NameValue})">
            <summary>
            发送 CONNECT 请求
            </summary>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetWsMessageState(HPSocket.WebSocket.MessageState@)">
            <summary>
            获取当前 WebSocket 消息状态
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.StartHttp">
            <summary>
            启动 HTTP 通信, 当通信组件设置为非自动启动 HTTP 通信时，需要调用本方法启动 HTTP 通信
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetStatusCode">
            <summary>
            获取 HTTP 状态码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.IsUpgrade">
            <summary>
            检查是否升级协议
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.IsKeepAlive">
            <summary>
            检查是否有 Keep-Alive 标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetVersion">
            <summary>
            获取协议版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetContentLength">
            <summary>
            获取内容长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetContentType">
            <summary>
            获取内容类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetContentEncoding">
            <summary>
            获取内容类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetTransferEncoding">
            <summary>
            获取传输编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetUpgradeType">
            <summary>
            获取协议升级类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetParseErrorInfo(System.String@)">
            <summary>
            获取解析错误代码
            </summary>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetHeader(System.String)">
            <summary>
            获取某个请求头（单值）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetHeaders(System.String)">
            <summary>
            获取某个请求头（多值）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetAllHeaders">
            <summary>
            获取所有请求头
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetAllHeaderNames">
            <summary>
            获取所有请求头名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetCookie(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpClient.GetAllCookies">
            <summary>
            获取所有 Cookie
            </summary>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IHttpEasyAgent">
            <summary>
            http easy agent
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyAgent.OnEasyChunkData">
            <summary>
            每次到一个完整的chunk data数据包, 事件到达同时表示chunk data接收完成
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyAgent.OnEasyMessageData">
            <summary>
            每次到一个完整的http get/post数据包 事件到达同时表示message接收完成
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyAgent.OnEasyWebSocketMessageData">
            <summary>
            每次到一个完整的web socket数据包 事件到达同时表示web socket message接收完成
            </summary>
        </member>
        <member name="T:HPSocket.IHttpEasyClient">
            <summary>
            http easy client
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyClient.OnEasyChunkData">
            <summary>
            每次到一个完整的chunk data数据包, 事件到达同时表示chunk data接收完成
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyClient.OnEasyMessageData">
            <summary>
            每次到一个完整的http get/post数据包 事件到达同时表示message接收完成
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyClient.OnEasyWebSocketMessageData">
            <summary>
            每次到一个完整的web socket数据包 事件到达同时表示web socket message接收完成
            </summary>
        </member>
        <member name="P:HPSocket.IHttpEasyData.AutoDecompression">
            <summary>
            自动解压缩, 默认true, gzip/deflate 自动解压缩 
            </summary>
        </member>
        <member name="T:HPSocket.IHttpEasyServer">
            <summary>
            http easy agent
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyServer.OnEasyChunkData">
            <summary>
            每次到一个完整的chunk data数据包, 事件到达同时表示chunk data接收完成
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyServer.OnEasyMessageData">
            <summary>
            每次到一个完整的http get/post数据包 事件到达同时表示message接收完成
            </summary>
        </member>
        <member name="E:HPSocket.IHttpEasyServer.OnEasyWebSocketMessageData">
            <summary>
            每次到一个完整的web socket数据包 事件到达同时表示web socket message接收完成
            </summary>
        </member>
        <member name="T:HPSocket.IHttpMultiId">
            <summary>
            http server/agent 公共接口
            </summary>
        </member>
        <member name="M:HPSocket.IHttpMultiId.SendChunkData(System.IntPtr,System.Byte[],System.Int32,System.String)">
            <summary>
            向对端发送 Chunked 数据分片
            </summary>
            <param name="connId"></param>
            <param name="data">Chunked 数据分片</param>
            <param name="length">数据分片长度（为 0 表示结束分片）</param>
            <param name="extensions">扩展属性（默认：null）</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.SendWsMessage(System.IntPtr,HPSocket.WebSocket.MessageState,System.Byte[],System.Int32)">
            <summary>
            发送web socket消息
            </summary>
            <param name="connId"></param>
            <param name="state"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.StartHttp(System.IntPtr)">
            <summary>
            启动 HTTP 通信, 当通信组件设置为非自动启动 HTTP 通信时，需要调用本方法启动 HTTP 通信
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetWsMessageState(System.IntPtr,HPSocket.WebSocket.MessageState@)">
            <summary>
            获取当前 WebSocket 消息状态
            </summary>
            <param name="connId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.IsUpgrade(System.IntPtr)">
            <summary>
            检查是否升级协议
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.IsKeepAlive(System.IntPtr)">
            <summary>
            检查是否有 Keep-Alive 标识
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetVersion(System.IntPtr)">
            <summary>
            获取协议版本
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetContentLength(System.IntPtr)">
            <summary>
            获取内容长度
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetContentType(System.IntPtr)">
            <summary>
            获取内容类型
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetContentEncoding(System.IntPtr)">
            <summary>
            获取内容类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetTransferEncoding(System.IntPtr)">
            <summary>
            获取传输编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetUpgradeType(System.IntPtr)">
            <summary>
            获取协议升级类型
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetParseErrorInfo(System.IntPtr,System.String@)">
            <summary>
            获取解析错误代码
            </summary>
            <param name="connId"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetHeader(System.IntPtr,System.String)">
            <summary>
            获取某个请求头（单值）
            </summary>
            <param name="connId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetHeaders(System.IntPtr,System.String)">
            <summary>
            获取某个请求头（多值）
            </summary>
            <param name="connId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetAllHeaders(System.IntPtr)">
            <summary>
            获取所有请求头
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetAllHeaderNames(System.IntPtr)">
            <summary>
            获取所有请求头名称
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetCookie(System.IntPtr,System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpMultiId.GetAllCookies(System.IntPtr)">
            <summary>
            获取所有 Cookie
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="P:HPSocket.IHttpProxy.UserAgent">
            <summary>
            User-Agent, 只对 http 代理有效
            <para>默认HPSocket.net/2.0</para>
            </summary>
        </member>
        <member name="M:HPSocket.IHttpProxy.GetConnectData">
            <summary>
            获取连接代理需要的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpProxy.IsConnected(System.Byte[])">
            <summary>
            是否连接代理成功
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IHttpsAgent">
            <summary>
            https agent
            </summary>
        </member>
        <member name="T:HPSocket.IHttpsClient">
            <summary>
            https agent
            </summary>
        </member>
        <member name="T:HPSocket.IHttpsEasyAgent">
            <summary>
            https easy agent
            </summary>
        </member>
        <member name="T:HPSocket.IHttpsEasyClient">
            <summary>
            https easy client
            </summary>
        </member>
        <member name="T:HPSocket.IHttpsEasySerer">
            <summary>
            https easy agent
            </summary>
        </member>
        <member name="T:HPSocket.IHttpServer">
            <summary>
            http server
            </summary>
        </member>
        <member name="P:HPSocket.IHttpServer.ReleaseDelay">
            <summary>
            获取或设置连接释放延时（默认：3000 毫秒）
            </summary>
        </member>
        <member name="E:HPSocket.IHttpServer.OnRequestLine">
            <summary>
            【可选】请求行解析完成（仅用于 HTTP 服务端）
            </summary>
        </member>
        <member name="M:HPSocket.IHttpServer.SendResponse(System.IntPtr,HPSocket.Http.HttpStatusCode,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="connId"></param>
            <param name="statusCode">http状态码</param>
            <param name="headers">响应头</param>
            <param name="body">响应体</param>
            <param name="length">响应体体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpServer.SendResponse(System.IntPtr,HPSocket.Http.HttpStatusCode,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="connId"></param>
            <param name="statusCode">http状态码</param>
            <param name="desc">http响应描述 (一般根据状态码来)</param>
            <param name="headers">响应头</param>
            <param name="body">响应体</param>
            <param name="length">响应体体长度</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpServer.SendSmallFile(System.IntPtr,HPSocket.Http.HttpStatusCode,System.Collections.Generic.List{HPSocket.NameValue},System.String)">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="connId"></param>
            <param name="statusCode"></param>
            <param name="filePath"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpServer.SendWsMessage(System.IntPtr,System.Boolean,HPSocket.WebSocket.Rsv,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <summary>
            发送web socket消息
            </summary>
            <param name="connId"></param>
            <param name="final"></param>
            <param name="rsv"></param>
            <param name="opCode"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpServer.GetHost(System.IntPtr)">
            <summary>
            获取主机
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpServer.Release(System.IntPtr)">
            <summary>
            名称：释放连接
            描述：把连接放入释放队列，等待某个时间（通过 SetReleaseDelay() 设置）关闭连接
            </summary>
            <param name="connId">连接 ID</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpServer.GetUrlField(System.IntPtr,HPSocket.Http.HttpUrlField)">
            <summary>
            获取某个 URL 域值
            </summary>
            <param name="connId"></param>
            <param name="urlField"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpServer.GetUrlFieldSet(System.IntPtr)">
            <summary>
            获取请求行 URL 域掩码（URL 域参考：HttpUrlField）
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpServer.GetMethod(System.IntPtr)">
            <summary>
            获取请求方法
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IHttpsServer">
            <summary>
            https server
            </summary>
        </member>
        <member name="T:HPSocket.IHttpsSyncClient">
            <summary>
            https agent
            </summary>
        </member>
        <member name="T:HPSocket.IHttpSyncClient">
            <summary>
            http sync client
            </summary>
        </member>
        <member name="P:HPSocket.IHttpSyncClient.ConnectTimeout">
            <summary>
            获取或设置连接超时时间
            <para>（毫秒，0：系统默认超时，默认：5000）</para>
            </summary>
        </member>
        <member name="P:HPSocket.IHttpSyncClient.RequestTimeout">
            <summary>
            获取或设置请求超时时间
            <para>（毫秒，0：无限等待，默认：10000）</para>
            </summary>
        </member>
        <member name="P:HPSocket.IHttpSyncClient.ResponseEncoding">
            <summary>
            响应编码,
            <para>如果为空, 组件默认会根据响应头的Content-Type尝试寻找charset的值做解码编码</para>
            <para>如果Content-Type里没有charset, 则默认使用utf-8编码进行解码</para>
            </summary>
        </member>
        <member name="M:HPSocket.IHttpSyncClient.OpenUrl(HPSocket.Http.HttpMethod,System.String,System.Collections.Generic.List{HPSocket.NameValue},System.Byte[],System.Int32,System.Boolean)">
            <summary>
            发送 URL 请求
            <para>向服务端发送 HTTP URL 请求</para>
            </summary>
            <param name="method">http method</param>
            <param name="url">请求url</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <param name="length">请求体长度</param>
            <param name="forceReconnect">是否强制重新连接（默认：false，当请求 URL 的主机和端口与现有连接一致时，重用现有连接）</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpSyncClient.CleanupRequestResult">
            <summary>
            清除请求结果
            <para>清除上一次请求的响应头和响应体等结果信息（该方法会在每次发送请求前自动调用）</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IHttpSyncClient.GetResponseBody">
            <summary>
            获取响应体
            </summary>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IProxy">
            <summary>
            proxy
            </summary>
        </member>
        <member name="P:HPSocket.IProxy.Host">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:HPSocket.IProxy.Port">
            <summary>
            主机端口
            </summary>
        </member>
        <member name="P:HPSocket.IProxy.UserName">
            <summary>
            帐号
            </summary>
        </member>
        <member name="P:HPSocket.IProxy.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:HPSocket.IServer">
            <summary>
            server 基础接口
            </summary>
        </member>
        <member name="P:HPSocket.IServer.Address">
            <summary>
            要绑定的服务器地址
            </summary>
        </member>
        <member name="P:HPSocket.IServer.Port">
            <summary>
            要绑定的服务器端口
            </summary>
        </member>
        <member name="E:HPSocket.IServer.OnAccept">
            <summary>
            连接到达事件
            </summary>
        </member>
        <member name="E:HPSocket.IServer.OnSend">
            <summary>
            数据包发送事件
            </summary>
        </member>
        <member name="E:HPSocket.IServer.OnPrepareListen">
            <summary>
            准备监听了事件
            </summary>
        </member>
        <member name="E:HPSocket.IServer.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="E:HPSocket.IServer.OnClose">
            <summary>
            连接关闭事件
            </summary>
        </member>
        <member name="E:HPSocket.IServer.OnShutdown">
            <summary>
            服务器关闭事件
            </summary>
        </member>
        <member name="E:HPSocket.IServer.OnHandShake">
            <summary>
            握手成功事件
            </summary>
        </member>
        <member name="P:HPSocket.IServer.HasStarted">
            <summary>
            获取是否启动
            </summary>
        </member>
        <member name="P:HPSocket.IServer.State">
            <summary>
            获取状态
            </summary>
        </member>
        <member name="P:HPSocket.IServer.ConnectionCount">
            <summary>
            获取连接数
            </summary>
        </member>
        <member name="P:HPSocket.IServer.IsSecure">
            <summary>
            是否为安全连接（SSL/HTTPS）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.MaxConnectionCount">
            <summary>
            设置最大连接数（组件会根据设置值预分配内存，因此需要根据实际情况设置，不宜过大）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.WorkerThreadCount">
            <summary>
            读取或设置工作线程数量（通常设置为 2 * CPU + 2）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.FreeSocketObjLockTime">
            <summary>
            读取或设置 Socket 缓存对象锁定时间（毫秒，在锁定期间该 Socket 缓存对象不能被获取使用）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.FreeSocketObjPool">
            <summary>
            读取或设置 Socket 缓存池大小（通常设置为平均并发连接数量的 1/3 - 1/2）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.FreeBufferObjPool">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.FreeSocketObjHold">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.FreeBufferObjHold">
            <summary>
            读取或设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.IsMarkSilence">
            <summary>
            读取或设置是否标记静默时间（设置为 true 时 DisconnectSilenceConnections() 和 GetSilencePeriod() 才有效，默认：false）
            </summary>
        </member>
        <member name="P:HPSocket.IServer.SendPolicy">
            <summary>
            获取或设置数据发送策略
            </summary>
        </member>
        <member name="P:HPSocket.IServer.OnSendSyncPolicy">
            <summary>
            获取或设置 OnSend 事件同步策略
            </summary>
        </member>
        <member name="P:HPSocket.IServer.ReuseAddressPolicy">
            <summary>
            获取或设置地址重用选项
            </summary>
        </member>
        <member name="P:HPSocket.IServer.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="P:HPSocket.IServer.ErrorMessage">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="M:HPSocket.IServer.Start">
            <summary>
            启动服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.Stop">
            <summary>
            停止服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.Send(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bytes"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.Send(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bytes"></param>
            <param name="offset">针对bytes的偏移</param>
            <param name="length">发多大</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.SendPackets(System.IntPtr,HPSocket.Wsabuf[])">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="connId">连接 ID</param>
            <param name="buffers">发送缓冲区数组</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:HPSocket.IServer.Disconnect(System.IntPtr,System.Boolean)">
            <summary>
            断开与某个客户的连接
            </summary>
            <param name="connId"></param>
            <param name="force">是否强制断开</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.DisconnectLongConnections(System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时间的连接
            </summary>
            <param name="period">毫秒</param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.PauseReceive(System.IntPtr)">
            <summary>
            暂停接收
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.ResumeReceive(System.IntPtr)">
            <summary>
            唤醒接收
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetReceiveState(System.IntPtr)">
            <summary>
            获取连接的接收状态
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.DisconnectSilenceConnections(System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时长的静默连接
            </summary>
            <param name="period">毫秒</param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetLocalAddress(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的本地地址信息
            </summary>
            <param name="connId"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetRemoteAddress(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的远程地址信息
            </summary>
            <param name="connId"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetPendingDataLength(System.IntPtr,System.Int32@)">
            <summary>
            获取连接中未发出数据的长度
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetListenAddress(System.String@,System.UInt16@)">
            <summary>
            获取监听socket的地址信息
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetConnectPeriod(System.IntPtr,System.UInt32@)">
            <summary>
            获取指定连接的连接时长（毫秒）
            </summary>
            <param name="connId"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetSilencePeriod(System.IntPtr,System.UInt32@)">
            <summary>
            获取某个连接静默时间（毫秒）
            </summary>
            <param name="connId"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetAllConnectionIds">
            <summary>
            获取所有连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.IsConnected(System.IntPtr)">
            <summary>
            是否有效连接
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.NativeSetConnectionExtra(System.IntPtr,System.IntPtr)">
            <summary>
            设置连接附加数据, 非托管版本, hp-socket自带方法；非特殊需求不要使用这个方法, 请直接使用 SetExtra();
            </summary>
            <param name="connId"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.NativeGetConnectionExtra(System.IntPtr,System.IntPtr@)">
            <summary>
            获取连接附加数据, 非托管版本, hp-socket自带方法；非特殊需求不要使用这个方法, 请直接使用 GetExtra();
            </summary>
            <param name="connId"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.SetExtra(System.IntPtr,System.Object)">
            <summary>
            设置附加数据
            </summary>
            <param name="connId"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.GetExtra``1(System.IntPtr)">
            <summary>
            获取附加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IServer.RemoveExtra(System.IntPtr)">
            <summary>
            删除附加数据
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ISocket">
            <summary>
            所有组件的基接口
            </summary>
        </member>
        <member name="P:HPSocket.ISocket.SenderPtr">
            <summary>
            组件原始指针
            <para>比如在 hp-socket 的线程池中需要使用</para>
            </summary>
        </member>
        <member name="P:HPSocket.ISocket.Tag">
            <summary>
            获取或设置包含有关组件的数据的对象
            </summary>
        </member>
        <member name="P:HPSocket.ISocket.Version">
            <summary>
            当前组件版本
            </summary>
        </member>
        <member name="M:HPSocket.ISocket.Wait(System.Int32)">
            <summary>
            等待通信组件停止运行
            <para>可用在控制台程序, 用来阻塞主线程, 防止程序退出</para>
            </summary>
            <param name="milliseconds">超时时间（毫秒，默认：-1，永不超时）</param>
        </member>
        <member name="M:HPSocket.ISocket.WaitAsync(System.Int32)">
            <summary>
            等待通信组件停止运行
            <para>可用在控制台程序, 用来阻塞主线程, 防止程序退出</para>
            </summary>
            <param name="milliseconds">超时时间（毫秒，默认：-1，永不超时）</param>
        </member>
        <member name="M:HPSocket.ISocket.StopAsync">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:HPSocket.ISocks5Proxy.GetConnectData">
            <summary>
            获取连接代理需要的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISocks5Proxy.GetAuthenticateData(System.Byte[],System.Byte[]@)">
            <summary>
            获取认证数据
            </summary>
            <param name="data"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISocks5Proxy.CheckSubVersion(System.Byte[])">
            <summary>
            检查子版本
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISocks5Proxy.GetConnectRemoteServerData(System.Byte[]@)">
            <summary>
            获取连接目标服务器的数据
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISocks5Proxy.IsConnected(System.Byte[])">
            <summary>
            是否连接代理成功
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ISslAgent`1">
            <summary>
            ssl agent
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.ISslAgent`1.OnParseRequestBody">
            <summary>
            解析请求包体对象事件
            </summary>
        </member>
        <member name="P:HPSocket.ISslAgent`1.DataReceiveAdapter">
            <summary>
            数据接收适配器
            </summary>
        </member>
        <member name="T:HPSocket.ISslAgent">
            <summary>
            ssl agent
            </summary>
        </member>
        <member name="M:HPSocket.ISslAgent.StartHandShake(System.IntPtr)">
            <summary>
            启动 SSL 握手，当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslAgent.GetSessionInfo(System.IntPtr,HPSocket.Ssl.SslSessionInfo,System.IntPtr@)">
            <summary>
            获取指定类型的 SSL WebSocketSession 信息（输出类型参考：SslSessionInfo）
            </summary>
            <param name="connId"></param>
            <param name="info"></param>
            <param name="sessionInfo"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ISslClient`1">
            <summary>
            ssl client
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.ISslClient`1.OnParseRequestBody">
            <summary>
            解析请求包体对象事件
            </summary>
        </member>
        <member name="P:HPSocket.ISslClient`1.DataReceiveAdapter">
            <summary>
            数据接收适配器
            </summary>
        </member>
        <member name="T:HPSocket.ISslClient">
            <summary>
            ssl client
            </summary>
        </member>
        <member name="M:HPSocket.ISslClient.StartHandShake">
            <summary>
            启动 SSL 握手，当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslClient.GetSessionInfo(HPSocket.Ssl.SslSessionInfo,System.IntPtr@)">
            <summary>
            获取指定类型的 SSL WebSocketSession 信息（输出类型参考：SslSessionInfo）
            </summary>
            <param name="info"></param>
            <param name="sessionInfo"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ISslPackAgent">
            <summary>
            ssl pack agent
            </summary>
        </member>
        <member name="P:HPSocket.ISslPackAgent.MaxPackSize">
            <summary>
            读取或设置数据包最大长度，有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:HPSocket.ISslPackAgent.PackHeaderFlag">
            <summary>
            读取或设置包头标识，有效包头标识取值范围  0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="T:HPSocket.ISslPackClient">
            <summary>
            ssl pack client
            </summary>
        </member>
        <member name="P:HPSocket.ISslPackClient.MaxPackSize">
            <summary>
            读取或设置数据包最大长度，有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:HPSocket.ISslPackClient.PackHeaderFlag">
            <summary>
            读取或设置包头标识，有效包头标识取值范围  0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="T:HPSocket.ISslPackServer">
            <summary>
            ssl pack server
            </summary>
        </member>
        <member name="P:HPSocket.ISslPackServer.MaxPackSize">
            <summary>
            读取或设置数据包最大长度，有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:HPSocket.ISslPackServer.PackHeaderFlag">
            <summary>
            读取或设置包头标识，有效包头标识取值范围  0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="T:HPSocket.ISslPullAgent">
            <summary>
            ssl pull agent
            </summary>
        </member>
        <member name="E:HPSocket.ISslPullAgent.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:HPSocket.ISslPullAgent.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullAgent.Fetch(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullAgent.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="connId"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullAgent.Peek(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ISslPullClient">
            <summary>
            ssl pull client
            </summary>
        </member>
        <member name="E:HPSocket.ISslPullClient.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:HPSocket.ISslPullClient.Fetch(System.IntPtr,System.Int32)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullClient.Fetch(System.Int32,System.Byte[]@)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullClient.Peek(System.IntPtr,System.Int32)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullClient.Peek(System.Int32,System.Byte[]@)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ISslPullServer">
            <summary>
            ssl pull server
            </summary>
        </member>
        <member name="E:HPSocket.ISslPullServer.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:HPSocket.ISslPullServer.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullServer.Fetch(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullServer.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="connId"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslPullServer.Peek(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ISslServer`1">
            <summary>
            ssl server
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.ISslServer`1.OnParseRequestBody">
            <summary>
            解析请求包体对象事件
            </summary>
        </member>
        <member name="P:HPSocket.ISslServer`1.DataReceiveAdapter">
            <summary>
            数据接收适配器
            </summary>
        </member>
        <member name="T:HPSocket.ISslServer">
            <summary>
            ssl server
            </summary>
        </member>
        <member name="M:HPSocket.ISslServer.AddContext(HPSocket.Ssl.SslVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            增加 SNI 主机证书（只用于服务端）
            <para>SSL 服务端在 SetupSSLContext() 成功后可以调用本方法增加多个 SNI 主机证书</para>
            <remarks>
            返回值：正数		-- 成功，并返回 SNI 主机证书对应的索引，该索引用于在 SNI 回调函数中定位 SNI 主机
            返回值：负数		-- 失败，可通过 Sys.ErrorCode() 获取失败原因
            </remarks>
            </summary>
            <param name="verifyMode">SSL 验证模式（参考 SslVerifyMode）</param>
            <param name="pemCertFile">证书文件</param>
            <param name="pemKeyFile">私钥文件</param>
            <param name="keyPassword">私钥密码（没有密码则为空）</param>
            <param name="caPemCert">CA 证书文件或目录（单向验证可选）</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslServer.AddContextByMemory(HPSocket.Ssl.SslVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            增加 SNI 主机证书（通过内存加载证书）
            <para>SSL 服务端在 SetupSSLContext() 成功后可以调用本方法增加多个 SNI 主机证书</para>
            <remarks>
            返回值：正数		-- 成功，并返回 SNI 主机证书对应的索引，该索引用于在 SNI 回调函数中定位 SNI 主机
            返回值：负数		-- 失败，可通过 Sys.ErrorCode() 获取失败原因
            </remarks>
            </summary>
            <param name="verifyMode">SSL 验证模式（参考 EnSSLVerifyMode）</param>
            <param name="pemCert">证书内容</param>
            <param name="pemKey">私钥内容</param>
            <param name="keyPassword">私钥密码（没有密码则为空）</param>
            <param name="caPemCert">CA 证书内容（单向验证可选）</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslServer.BindServerName(System.String,System.Int32)">
            <summary>
            绑定 SNI 主机域名
            <para>SSL 服务端在 AddSSLContext() 成功后可以调用本方法绑定主机域名到 SNI 主机证书</para>
            <remarks>
            返回值：正数		-- 成功
            返回值：负数		-- 失败，可通过 Sys.ErrorCode() 获取失败原因
            </remarks>
            </summary>
            <param name="serverName">主机域名</param>
            <param name="contextIndex">SNI 主机证书对应的索引</param>
            <returns></returns> 
        </member>
        <member name="M:HPSocket.ISslServer.StartHandShake(System.IntPtr)">
            <summary>
            启动 SSL 握手，当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ISslServer.GetSessionInfo(System.IntPtr,HPSocket.Ssl.SslSessionInfo,System.IntPtr@)">
            <summary>
            获取指定类型的 SSL WebSocketSession 信息（输出类型参考：SslSessionInfo）
            </summary>
            <param name="connId"></param>
            <param name="info"></param>
            <param name="sessionInfo"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ITcpAgent`1">
            <summary>
            tcp agent
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.ITcpAgent`1.OnParseRequestBody">
            <summary>
            解析请求包体对象事件
            </summary>
        </member>
        <member name="P:HPSocket.ITcpAgent`1.DataReceiveAdapter">
            <summary>
            数据接收适配器
            </summary>
        </member>
        <member name="T:HPSocket.ITcpAgent">
            <summary>
            tcp agent
            </summary>
        </member>
        <member name="P:HPSocket.ITcpAgent.SocketBufferSize">
            <summary>
            读取或设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为 1024 的倍数）
            </summary>
        </member>
        <member name="P:HPSocket.ITcpAgent.KeepAliveTime">
            <summary>
            读取或设置心跳包间隔（毫秒，0 则不发送心跳包）
            </summary>
        </member>
        <member name="P:HPSocket.ITcpAgent.KeepAliveInterval">
            <summary>
            读取或设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
        </member>
        <member name="M:HPSocket.ITcpAgent.SendSmallFile(System.IntPtr,System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据</param>
            <param name="tail">尾部附加数据</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:HPSocket.ITcpAgent.SendSmallFile(System.IntPtr,System.String,System.Byte[],System.Byte[])">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="T:HPSocket.ITcpClient`1">
            <summary>
            tcp client
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.ITcpClient`1.OnParseRequestBody">
            <summary>
            解析请求包体对象事件
            </summary>
        </member>
        <member name="P:HPSocket.ITcpClient`1.DataReceiveAdapter">
            <summary>
            数据接收适配器
            </summary>
        </member>
        <member name="T:HPSocket.ITcpClient">
            <summary>
            tcp client
            </summary>
        </member>
        <member name="P:HPSocket.ITcpClient.SocketBufferSize">
            <summary>
             读取或设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为：(N * 1024) - sizeof(TBufferObj)）
            </summary>
        </member>
        <member name="P:HPSocket.ITcpClient.KeepAliveTime">
            <summary>
             读取或设置心跳包间隔（毫秒，0 则不发送心跳包）
            </summary>
        </member>
        <member name="P:HPSocket.ITcpClient.KeepAliveInterval">
            <summary>
             读取或设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
        </member>
        <member name="M:HPSocket.ITcpClient.SendSmallFile(System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据</param>
            <param name="tail">尾部附加数据</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:HPSocket.ITcpClient.SendSmallFile(System.String,System.Byte[],System.Byte[])">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="T:HPSocket.ITcpPackAgent">
            <summary>
            tcp pack agent
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPackAgent.MaxPackSize">
            <summary>
            读取或设置数据包最大长度，有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPackAgent.PackHeaderFlag">
            <summary>
            读取或设置包头标识，有效包头标识取值范围  0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="T:HPSocket.ITcpPackClient">
            <summary>
            tcp pack client
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPackClient.MaxPackSize">
            <summary>
            读取或设置数据包最大长度，有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPackClient.PackHeaderFlag">
            <summary>
            读取或设置包头标识，有效包头标识取值范围  0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="T:HPSocket.ITcpPackServer">
            <summary>
            tcp pack server
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPackServer.MaxPackSize">
            <summary>
            读取或设置数据包最大长度，有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPackServer.PackHeaderFlag">
            <summary>
            读取或设置包头标识，有效包头标识取值范围  0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="T:HPSocket.ITcpPortForwarding">
            <summary>
            tcp 端口转发
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPortForwarding.OnServerAccept">
            <summary>
            server 连接进入
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPortForwarding.OnServerReceive">
            <summary>
            server 数据到达
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPortForwarding.OnServerClose">
            <summary>
            server 连接离开
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPortForwarding.OnAgentConnect">
            <summary>
            agent 连接成功(使用代理连接时,代理连接成功才会进入)
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPortForwarding.OnAgentReceive">
            <summary>
            agent 数据到达
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPortForwarding.OnAgentClose">
            <summary>
            agent 连接断开
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.Server">
            <summary>
            内部server对象
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.Agent">
            <summary>
            内部agent对象
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.LocalBindAddress">
            <summary>
            本地绑定地址, 默认0.0.0.0
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.LocalBindPort">
            <summary>
            本地绑定端口
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.TargetAddress">
            <summary>
            目标服务器地址
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.TargetPort">
            <summary>
            目标服务器端口
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.EachWorkThreadCount">
            <summary>
            转发服务器和客户端工作线程数,  通常设置为 2 * CPU + 2
            <para>注意: 当前值是每个组件的工作线程数, 比如设置为5, 服务器和客户端各5个, 一共10个工作线程</para>
            <para></para>
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.MaxConnectionCount">
            <summary>
            最大连接数, 默认10000
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.ConnectionTimeout">
            <summary>
            连接目标服务器的超时时间, 默认0, 不启用, 使用系统默认时间
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.ProxyList">
            <summary>
            代理列表
            <para>转发访问目标服务器时,可以使用代理</para>
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:HPSocket.ITcpPortForwarding.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:HPSocket.ITcpPortForwarding.Start">
            <summary>
            开启服务
            </summary>
        </member>
        <member name="M:HPSocket.ITcpPortForwarding.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="T:HPSocket.ITcpPullAgent">
            <summary>
            tcp pull agent
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPullAgent.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:HPSocket.ITcpPullAgent.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullAgent.Fetch(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullAgent.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="connId"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullAgent.Peek(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ITcpPullClient">
            <summary>
            tcp pull client
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPullClient.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:HPSocket.ITcpPullClient.Fetch(System.IntPtr,System.Int32)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullClient.Fetch(System.Int32,System.Byte[]@)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullClient.Peek(System.IntPtr,System.Int32)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullClient.Peek(System.Int32,System.Byte[]@)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ITcpPullServer">
            <summary>
            tcp pull server
            </summary>
        </member>
        <member name="E:HPSocket.ITcpPullServer.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:HPSocket.ITcpPullServer.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullServer.Fetch(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            抓取数据，用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullServer.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="connId"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.ITcpPullServer.Peek(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            窥探数据（不会移除缓冲区数据），用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.ITcpServer`1">
            <summary>
            tcp server
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.ITcpServer`1.OnParseRequestBody">
            <summary>
            解析请求包体对象事件
            </summary>
        </member>
        <member name="P:HPSocket.ITcpServer`1.DataReceiveAdapter">
            <summary>
            数据接收适配器
            </summary>
        </member>
        <member name="T:HPSocket.ITcpServer">
            <summary>
            tcp server
            </summary>
        </member>
        <member name="P:HPSocket.ITcpServer.AcceptSocketCount">
            <summary>
            读取或设置 Accept 预投递数量（根据负载调整设置，Accept 预投递数量越大则支持的并发连接请求越多）
            </summary>
        </member>
        <member name="P:HPSocket.ITcpServer.SocketBufferSize">
            <summary>
            读取或设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为 1024 的倍数）
            </summary>
        </member>
        <member name="P:HPSocket.ITcpServer.SocketListenQueue">
            <summary>
            读取或设置监听 Socket 的等候队列大小（根据并发连接数量调整设置）
            </summary>
        </member>
        <member name="P:HPSocket.ITcpServer.KeepAliveTime">
            <summary>
            读取或设置心跳包间隔（毫秒，0 则不发送心跳包）
            </summary>
        </member>
        <member name="P:HPSocket.ITcpServer.KeepAliveInterval">
            <summary>
            读取或设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
        </member>
        <member name="M:HPSocket.ITcpServer.SendSmallFile(System.IntPtr,System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据</param>
            <param name="tail">尾部附加数据</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:HPSocket.ITcpServer.SendSmallFile(System.IntPtr,System.String,System.Byte[],System.Byte[])">
            <summary>
            发送本地小文件
            <para>向指定连接发送 4096 KB 以下的小文件</para>
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>true.成功,false.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="T:HPSocket.IUdpArqClient">
            <summary>
            udp arq client
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.IsNoDelay">
            <summary>
            获取或设置是否开启 NoDelay 模式 
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.IsTurnoffCongestCtrl">
            <summary>
            获取或设置是否关闭拥塞控制（默认：false，不关闭）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.FlushInterval">
            <summary>
            获取或设置数据刷新间隔（毫秒，默认：20）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.ResendByAcks">
            <summary>
            获取或设置快速重传 ACK 跨越次数（默认：0，关闭快速重传）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.SendWndSize">
            <summary>
            获取或设置发送窗口大小（数据包数量，默认：128）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.RecvWndSize">
            <summary>
            获取或设置接收窗口大小（数据包数量，默认：512）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.MinRto">
            <summary>
            获取或设置最小重传超时时间（毫秒，默认：30）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.MaxTransUnit">
            <summary>
            获取或设置最大传输单元（默认：0，与 MaxDataGramSize 一致）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.MaxMessageSize">
            <summary>
            获取或设置最大数据包大小（默认：4096）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.HandShakeTimeout">
            <summary>
            获取或设置握手超时时间（毫秒，默认：5000）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqClient.FastLimit">
            <summary>
            获取或设置快速握手次数限制（默认：5，如果为 0 则不限制
            </summary>
        </member>
        <member name="M:HPSocket.IUdpArqClient.GetWaitingSendMessageCount(System.Int32@)">
            <summary>
            获取等待发送包数量
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IUdpArqServer">
            <summary>
            udp arq server
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.IsNoDelay">
            <summary>
            获取或设置是否开启 NoDelay 模式 
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.IsTurnoffCongestCtrl">
            <summary>
            获取或设置是否关闭拥塞控制（默认：false，不关闭）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.FlushInterval">
            <summary>
            获取或设置数据刷新间隔（毫秒，默认：20）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.ResendByAcks">
            <summary>
            获取或设置快速重传 ACK 跨越次数（默认：0，关闭快速重传）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.SendWndSize">
            <summary>
            获取或设置发送窗口大小（数据包数量，默认：128）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.RecvWndSize">
            <summary>
            获取或设置接收窗口大小（数据包数量，默认：512）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.MinRto">
            <summary>
            获取或设置最小重传超时时间（毫秒，默认：30）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.MaxTransUnit">
            <summary>
            获取或设置最大传输单元（默认：0，与 MaxDataGramSize 一致）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.MaxMessageSize">
            <summary>
            获取或设置最大数据包大小（默认：4096）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.HandShakeTimeout">
            <summary>
            获取或设置握手超时时间（毫秒，默认：5000）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpArqServer.FastLimit">
            <summary>
            获取或设置快速握手次数限制（默认：5，如果为 0 则不限制
            </summary>
        </member>
        <member name="M:HPSocket.IUdpArqServer.GetWaitingSendMessageCount(System.IntPtr,System.Int32@)">
            <summary>
            获取等待发送包数量
            </summary>
            <param name="connId"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IUdpCast">
            <summary>
            udp cast
            </summary>
        </member>
        <member name="P:HPSocket.IUdpCast.MaxDatagramSize">
            <summary>
            获取或设置数据报文最大长度
            <para>建议在局域网环境下不超过 1472 字节，在广域网环境下不超过 548 字节</para>
            </summary>
        </member>
        <member name="P:HPSocket.IUdpCast.CastMode">
            <summary>
            获取或设置传播模式（组播或广播）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpCast.MultiCastTtl">
            <summary>
            获取或设置组播报文的 TTL（0 - 255）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpCast.IsMultiCastLoop">
            <summary>
            获取或设置是否启用组播环路
            </summary>
        </member>
        <member name="M:HPSocket.IUdpCast.GetRemoteAddress(System.String@,System.UInt16@)">
            <summary>
            获取当前数据报的远程地址信息（通常在 OnReceive 事件中调用）
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IUdpClient">
            <summary>
            udp client
            </summary>
        </member>
        <member name="P:HPSocket.IUdpClient.MaxDatagramSize">
            <summary>
            获取或设置数据报文最大长度
            <para>建议在局域网环境下不超过 1472 字节，在广域网环境下不超过 548 字节</para>
            </summary>
        </member>
        <member name="P:HPSocket.IUdpClient.DetectAttempts">
            <summary>
            获取或设置监测包尝试次数
            <para>0 则不发送监测跳包，如果超过最大尝试次数则认为已断线</para>
            </summary>
        </member>
        <member name="P:HPSocket.IUdpClient.DetectInterval">
            <summary>
            获取或设置心跳检查次数
            </summary>
        </member>
        <member name="T:HPSocket.IUdpNode">
            <summary>
            udp node
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.Address">
            <summary>
            监听地址，默认0.0.0.0
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.Port">
            <summary>
            本地端口，默认0
            </summary>
        </member>
        <member name="E:HPSocket.IUdpNode.OnPrepareListen">
            <summary>
            准备监听了事件
            </summary>
        </member>
        <member name="E:HPSocket.IUdpNode.OnSend">
            <summary>
            数据包发送事件
            </summary>
        </member>
        <member name="E:HPSocket.IUdpNode.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="E:HPSocket.IUdpNode.OnError">
            <summary>
            发生了错误事件
            </summary>
        </member>
        <member name="E:HPSocket.IUdpNode.OnShutdown">
            <summary>
            关闭服务事件
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.HasStarted">
            <summary>
            检查通信组件是否已启动
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.State">
            <summary>
            查看通信组件当前状态
            </summary>
            <returns></returns>
        </member>
        <member name="P:HPSocket.IUdpNode.CastMode">
            <summary>
            获取传播模式
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.PendingDataLength">
            <summary>
            获取未发出数据的长度
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.MaxDatagramSize">
            <summary>
            获取或设置数据报文最大长度（建议在局域网环境下不超过 1432 字节，在广域网环境下不超过 548 字节）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.IsReuseAddress">
            <summary>
            获取或设置是否使用地址重用机制（默认：不启用）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.MultiCastTtl">
            <summary>
            获取或设置组播报文的 TTL（0 - 255）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.IsMultiCastLoop">
            <summary>
            获取或设置是否启用组播环路
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.WorkerThreadCount">
            <summary>
            获取或设置工作线程数量（通常设置为 2 * CPU + 2）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.PostReceiveCount">
            <summary>
            获取或设置 Receive 预投递数量（根据负载调整设置，Receive 预投递数量越大则丢包概率越小）
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.FreeBufferPoolSize">
            <summary>
            获取或设置内存块缓存池大小
            </summary>
            <returns></returns>
        </member>
        <member name="P:HPSocket.IUdpNode.FreeBufferPoolHold">
            <summary>
            获取或设置内存块缓存池回收阀值
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.ReuseAddressPolicy">
            <summary>
            获取或设置地址重用选项
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.ErrorMessage">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="P:HPSocket.IUdpNode.ExtraData">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="M:HPSocket.IUdpNode.Start">
            <summary>
            启动 UDP 节点通信组件，启动完成后可开始收发数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.StartWithCast(HPSocket.Udp.CastMode,System.String)">
            <summary>
            启动 UDP 节点通信组件，启动完成后可开始收发数据
            </summary>
            <param name="castMode">传播模式（默认：UniCast）</param>
            <param name="castAddress">传播地址（默认：null，当 caseMode 为 Multicast 或 Broadcast 时有效）</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.Stop">
            <summary>
            关闭通信组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.Send(System.String,System.UInt16,System.Byte[],System.Int32)">
            <summary>
            向指定地址发送数据
            </summary>
            <param name="remoteAddress"></param>
            <param name="remotePort"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.Send(System.String,System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            向指定地址发送数据
            </summary>
            <param name="remoteAddress"></param>
            <param name="remotePort"></param>
            <param name="data"></param>
            <param name="offset">发送缓冲区偏移量</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.Send(System.String,System.UInt16,HPSocket.Wsabuf[],System.Int32)">
            <summary>
            发送多组数据
            <para>向指定地址发送多组数据，把所有数据包组合成一个数据包发送（数据包的总长度不能大于设置的 UDP 包最大长度） </para>
            </summary>
            <param name="remoteAddress"></param>
            <param name="remotePort"></param>
            <param name="buffers">发送缓冲区数组</param>
            <param name="count">发送缓冲区数目</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.SendCast(System.Byte[],System.Int32)">
            <summary>
            向传播地址发送数据
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.SendCast(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向传播地址发送数据
            </summary>
            <param name="data"></param>
            <param name="offset">发送缓冲区偏移量</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.SendCast(HPSocket.Wsabuf[],System.Int32)">
            <summary>
            发送多组数据
            <para>向传播地址发送多组数据，把所有数据包组合成一个数据包发送（数据包的总长度不能大于设置的 UDP 包最大长度） </para>
            </summary>
            <param name="buffers">发送缓冲区数组</param>
            <param name="count">发送缓冲区数目</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.GetLocalAddress(System.String@,System.UInt16@)">
            <summary>
            获取本节点地址
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IUdpNode.GetCastAddress(System.String@,System.UInt16@)">
            <summary>
            获取本节点传播地址
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IUdpServer">
            <summary>
            udp server
            </summary>
        </member>
        <member name="P:HPSocket.IUdpServer.MaxDatagramSize">
            <summary>
            获取或设置数据报文最大长度
            <para>建议在局域网环境下不超过 1472 字节，在广域网环境下不超过 548 字节</para>
            </summary>
        </member>
        <member name="P:HPSocket.IUdpServer.PostReceiveCount">
            <summary>
            获取或设置 Receive 预投递数量
            <para>根据负载调整设置，Receive 预投递数量越大则丢包概率越小</para>
            </summary>
        </member>
        <member name="P:HPSocket.IUdpServer.DetectAttempts">
            <summary>
            获取或设置监测包尝试次数
            <para>0 则不发送监测跳包，如果超过最大尝试次数则认为已断线</para>
            </summary>
        </member>
        <member name="P:HPSocket.IUdpServer.DetectInterval">
            <summary>
            获取或设置心跳检查次数
            </summary>
        </member>
        <member name="T:HPSocket.IWebSocket">
            <summary>
            web socket server/agent 公共接口
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocket.IgnoreCompressionExtensions">
            <summary>
            忽略压缩扩展, 默认false
            <para>如果忽略, 则不支持压缩解压缩</para>
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocket.Http">
            <summary>
            开放式http server/agent对象, 对 http 连接有 cookie 或者 header 操作, 直接调用这个对象操作
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocket.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocket.IsSecure">
            <summary>
            是否安全连接
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocket.MaxPacketSize">
            <summary>
            最大封包长度, 默认0, 不限制
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocket.SslConfiguration">
            <summary>
            ssl环境配置
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocket.SubProtocols">
            <summary>
            支持的子协议, 默认空, 不限制
            </summary>
        </member>
        <member name="M:HPSocket.IWebSocket.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:HPSocket.IWebSocket.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:HPSocket.IWebSocket.Send(System.IntPtr,System.Boolean,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="final"></param>
            <param name="opCode"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IWebSocket.Send(System.IntPtr,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="opCode"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IWebSocket.Text(System.IntPtr,System.String)">
            <summary>
            发送文本消息
            </summary>
            <param name="connId"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IWebSocket.Ping(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            发送ping消息
            </summary>
            <param name="connId"></param>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:HPSocket.IWebSocket.Pong(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            发送pong消息
            </summary>
            <param name="connId"></param>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:HPSocket.IWebSocket.Close(System.IntPtr)">
            <summary>
            发送关闭消息同时关闭连接
            </summary>
            <param name="connId"></param>
        </member>
        <member name="M:HPSocket.IWebSocket.GetAllConnectionIds">
            <summary>
            获取所有连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IWebSocketAgent">
            <summary>
            websocket agent
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocketAgent.BindAddress">
            <summary>
            本地绑定地址, 默认0.0.0.0
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocketAgent.DefaultMask">
            <summary>
            默认掩码, 默认值: byte[] { 0x01, 0x02, 0x03, 0x04 }
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocketAgent.UserAgent">
            <summary>
            浏览器 User-Agent, 默认 chrome78.0.3904.97 的 User-Agent
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocketAgent.Cookie">
            <summary>
            cookie
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocketAgent.ConnectionTimeout">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocketAgent.HasStarted">
            <summary>
            获取是否启动
            </summary>
        </member>
        <member name="E:HPSocket.IWebSocketAgent.OnMessage">
            <summary>
            cont/text/binary 消息
            </summary>
        </member>
        <member name="E:HPSocket.IWebSocketAgent.OnOpen">
            <summary>
            握手成功, 打开/进入 连接
            </summary>
        </member>
        <member name="E:HPSocket.IWebSocketAgent.OnClose">
            <summary>
            连接关闭
            </summary>
        </member>
        <member name="E:HPSocket.IWebSocketAgent.OnPing">
            <summary>
            ping消息
            </summary>
        </member>
        <member name="E:HPSocket.IWebSocketAgent.OnPong">
            <summary>
            pong消息
            </summary>
        </member>
        <member name="M:HPSocket.IWebSocketAgent.Connect">
            <summary>
            连接到目标 web socket 服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IWebSocketAgent.Send(System.IntPtr,System.Boolean,HPSocket.WebSocket.OpCode,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="final"></param>
            <param name="opCode"></param>
            <param name="data"></param>
            <param name="mask"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.IWebSocketAgent.Send(System.IntPtr,System.Boolean,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="final"></param>
            <param name="opCode"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.IWebSocketServer">
            <summary>
            web socket server
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocketServer.PingInterval">
            <summary>
            自动发送ping消息的时间间隔
            <para>毫秒，0不自动发送，默认不发送（多数分机房的防火墙都在1分钟检测空连接，超时无交互则被踢，如果间隔过长，可能被机房防火墙误杀）</para>
            <para>目前浏览器都不支持在客户端发送ping消息，所以一般在服务器发送ping，在客户端响应接收到ping消息之后再对服务器发送pong，或客户端主动pong，服务器响应pong再发送ping给客户端</para>
            </summary>
        </member>
        <member name="P:HPSocket.IWebSocketServer.HasStarted">
            <summary>
            获取是否启动
            </summary>
        </member>
        <member name="M:HPSocket.IWebSocketServer.AddHub``1(System.String)">
            <summary>
            对path注册特定服务
            <para>例如: AddHub&lt;Chat&gt;("/chat")</para>
            </summary>
            <typeparam name="THubWithNew">继承自THubWithNew的类</typeparam>
            <param name="path">url path</param>
        </member>
        <member name="M:HPSocket.IWebSocketServer.GetHub``1(System.String)">
            <summary>
            获取指定类型的已注册过的服务
            </summary>
            <typeparam name="THubWithNew">继承自THubWithNew的类</typeparam>
            <param name="path"></param>
            <returns>path有效返回对象，path无效返回T的默认类型</returns>
        </member>
        <member name="M:HPSocket.IWebSocketServer.RemoveHub(System.String)">
            <summary>
            移除已注册的服务
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:HPSocket.Proxy.ProxyConnectionState">
            <summary>
            代理连接状态
            </summary>
        </member>
        <member name="F:HPSocket.Proxy.ProxyConnectionState.Normal">
            <summary>
            正常收发
            </summary>
        </member>
        <member name="F:HPSocket.Proxy.ProxyConnectionState.Step1">
            <summary>
            socks5 获取受支持的认证方法; http 发送connect方法
            </summary>
        </member>
        <member name="F:HPSocket.Proxy.ProxyConnectionState.Step2">
            <summary>
            socks5 获取受支持的认证方法; http 判断连接是否成功
            </summary>
        </member>
        <member name="F:HPSocket.Proxy.ProxyConnectionState.Step3">
            <summary>
            socks5 连接目标服务器; http 未使用
            </summary>
        </member>
        <member name="M:HPSocket.Proxy.HttpProxy.SetRemoteAddressPort(System.String,System.UInt16)">
            <summary>
            设置远程地址端口
            </summary>
            <param name="remoteAddress"></param>
            <param name="remotePort"></param>
        </member>
        <member name="M:HPSocket.Proxy.HttpProxy.GetConnectData">
            <summary>
            获取连接代理需要的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Proxy.HttpProxy.IsConnected(System.Byte[])">
            <summary>
            是否连接代理成功
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Proxy.Socks5Proxy.SetRemoteAddressPort(System.String,System.UInt16)">
            <summary>
            设置远程地址端口
            </summary>
            <param name="remoteAddress"></param>
            <param name="remotePort"></param>
        </member>
        <member name="M:HPSocket.Proxy.Socks5Proxy.GetConnectData">
            <summary>
            获取连接代理需要的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Proxy.Socks5Proxy.GetAuthenticateData(System.Byte[],System.Byte[]@)">
            <summary>
            获取认证数据
            </summary>
            <param name="data"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Proxy.Socks5Proxy.CheckSubVersion(System.Byte[])">
            <summary>
            检查子版本
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Proxy.Socks5Proxy.GetConnectRemoteServerData(System.Byte[]@)">
            <summary>
            获取连接目标服务器的数据
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Proxy.Socks5Proxy.IsConnected(System.Byte[])">
            <summary>
            是否连接代理成功
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:HPSocket.Sdk.IpAddressType">
            <summary>
            IP 地址类型枚举值
            </summary>
        </member>
        <member name="F:HPSocket.Sdk.IpAddressType.All">
            <summary>
            所有
            </summary>
        </member>
        <member name="F:HPSocket.Sdk.IpAddressType.Ipv4">
            <summary>
            IPv4
            </summary>
        </member>
        <member name="F:HPSocket.Sdk.IpAddressType.Ipv6">
            <summary>
            IPv6
            </summary>
        </member>
        <member name="F:HPSocket.Sdk.IpAddressType.Domain">
            <summary>
            域名
            </summary>
        </member>
        <member name="T:HPSocket.Sdk.HpSocketLibrary">
            <summary>
            hp socket library path
            </summary>
        </member>
        <member name="F:HPSocket.Sdk.HpSocketLibrary.DllName">
            <summary>
            hp socket库名称，win、linux、mac会自动加后缀
            </summary>
        </member>
        <member name="M:HPSocket.Sdk.Sys.GetVersion">
            <summary>
            获取 hp socket版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.GetHostAddressType(System.String,HPSocket.Sdk.IpAddressType@)">
            <summary>
            获取主机地址类型
            </summary>
            <param name="host"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.HP_GetHPSocketVersion">
            <summary>
            获取 HPSocket 版本号（4 个字节分别为：主版本号，子版本号，修正版本号，构建编号）
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.HP_GetSocketErrorDesc(HPSocket.SocketError)">
            <summary>
            获取错误描述文本
            </summary>
            <param name="enCode"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.GetLastError">
            <summary>
            调用系统的 ::ErrorCode() 方法获取系统错误代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_WSAGetLastError">
            <summary>
            调用系统的 ::WSAGetLastError() 方法获取通信错误代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.WsaGetLastError">
            <summary>
            调用系统的 ::WSAGetLastError() 方法获取通信错误代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            调用系统的 setsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            调用系统的 setsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_GetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            调用系统的 getsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.GetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            调用系统的 getsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_IoctlSocket(System.IntPtr,System.Int64,System.IntPtr)">
            <summary>
            调用系统的 ioctlsocket()
            </summary>
            <param name="sock"></param>
            <param name="cmd"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_WSAIoctl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            调用系统的 ::WSAIoctl()
            </summary>
            <param name="sock"></param>
            <param name="dwIoControlCode"></param>
            <param name="lpvInBuffer"></param>
            <param name="cbInBuffer"></param>
            <param name="lpvOutBuffer"></param>
            <param name="cbOutBuffer"></param>
            <param name="lpcbBytesReturned"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_NoDelay(System.IntPtr,System.Boolean)">
            <summary>
            设置 socket 选项：IPPROTO_TCP -> TCP_NODELAY
            </summary>
            <param name="sock"></param>
            <param name="bNoDelay"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_DontLinger(System.IntPtr,System.Boolean)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_DONTLINGER
            </summary>
            <param name="sock"></param>
            <param name="bDont"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_Linger(System.IntPtr,System.UInt16,System.UInt16)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_LINGER
            </summary>
            <param name="sock"></param>
            <param name="onoff"></param>
            <param name="linger"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_RecvBuffSize(System.IntPtr,System.Int32)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_RCVBUF
            </summary>
            <param name="sock"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_SendBuffSize(System.IntPtr,System.Int32)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_SNDBUF
            </summary>
            <param name="sock"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_RecvTimeOut(System.IntPtr,System.Int32)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_RCVTIMEO
            </summary>
            <param name="sock"></param>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_SendTimeOut(System.IntPtr,System.Int32)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_SNDTIMEO
            </summary>
            <param name="sock"></param>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_ExclusiveAddressUse(System.IntPtr,System.Boolean)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_EXCLUSIVEADDRUSE
            </summary>
            <param name="sock"></param>
            <param name="bExclusive"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SSO_ReuseAddress(System.IntPtr,HPSocket.ReuseAddressPolicy)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_EXCLUSIVEADDRUSE / SO_REUSEADDR
            </summary>
            <param name="sock"></param>
            <param name="opt"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_GetSocketLocalAddress(System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取 SOCKET 本地地址信息
            </summary>
            <param name="pSocket"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen">传入传出值,大小最好在222.222.222.222的长度以上</param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_GetSocketRemoteAddress(System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取 SOCKET 远程地址信息
            </summary>
            <param name="pSocket"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen">传入传出值,大小最好在222.222.222.222的长度以上</param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_EnumHostIPAddresses(System.String,HPSocket.Sdk.IpAddressType,System.IntPtr@,System.Int32@)">
            <summary>
            枚举主机 IP 地址
            不要用,未测试
            不要用,未测试
            不要用,未测试
            </summary>
            <param name="lpszHost"></param>
            <param name="enType"></param>
            <param name="lpppIpAddr"></param>
            <param name="piIpAddrCount"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_FreeHostIPAddresses(System.IntPtr)">
            <summary>
            释放 HP_LPTIPAddr
            </summary>
            <param name="lppIpAddr"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_IsIPAddress(System.String,HPSocket.Sdk.IpAddressType@)">
            <summary>
            检查字符串是否符合 IP 地址格式
            </summary>
            <param name="lpszAddress"></param>
            <param name="penType"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_GetIPAddress(System.String,System.Text.StringBuilder,System.Int32@,HPSocket.Sdk.IpAddressType@)">
            <summary>
            通过主机名获取 IP 地址
            </summary>
            <param name="lpszHost"></param>
            <param name="lpszIp"></param>
            <param name="piIpLength"></param>
            <param name="penType"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_NToH64(System.UInt64)">
            <summary>
            64 位网络字节序转主机字节序
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_HToN64(System.UInt64)">
            <summary>
            64 位主机字节序转网络字节序
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SwapEndian16(System.UInt16)">
            <summary>
            短整型高低字节交换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_SwapEndian32(System.UInt32)">
            <summary>
            长整型高低字节交换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_IsLittleEndian">
            <summary>
            检查是否小端字节序
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_Malloc(System.Int32)">
            <summary>
            分配内存
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_Realloc(System.IntPtr,System.Int32)">
            <summary>
            重新分配内存
            </summary>
            <param name="p"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Sdk.Sys.SYS_Free(System.IntPtr)">
            <summary>
            释放内存
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:HPSocket.Ssl.SslSessionInfo">
            <summary>
            SSL WebSocketSession 信息类型，用于 GetSSLSessionInfo()，标识输出的 WebSocketSession 信息类型
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.Min">
            <summary>
            min
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.Ctx">
            <summary>
             SSL CTX（输出类型：SSL_CTX*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.CtxMethod">
            <summary>
            SSL CTX Method （输出类型：SSL_METHOD*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.CtxCiphers">
            <summary>
            SSL CTX Ciphers （输出类型：STACK_OF(SSL_CIPHER)*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.CtxCertStore">
            <summary>
            SSL CTX Cert Store （输出类型：X509_STORE*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.ServerNameType">
            <summary>
            Server Name Type （输出类型：int）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.ServerName">
            <summary>
            Server Name （输出类型：LPCSTR）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.Version">
            <summary>
            SSL Version （输出类型：LPCSTR）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.Method">
            <summary>
            SSL Method （输出类型：SSL_METHOD*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.Cert">
            <summary>
            SSL Cert （输出类型：X509*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.PrivateKey">
            <summary>
            SSL Private Name （输出类型：EVP_PKEY*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.CurrentCipher">
            <summary>
            SSL Current Cipher （输出类型：SSL_CIPHER*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.Ciphers">
            <summary>
            SSL Available Ciphers（输出类型：STACK_OF(SSL_CIPHER)*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.ClientCiphers">
            <summary>
            SSL Client Ciphers （输出类型：STACK_OF(SSL_CIPHER)*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.PeerCert">
            <summary>
            SSL Peer Cert （输出类型：X509*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.PeerCertChain">
            <summary>
            SSL Peer Cert Chain （输出类型：STACK_OF(X509)*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.VerifiedChain">
            <summary>
            SSL Verified Chain （输出类型：STACK_OF(X509)*）
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionInfo.Max">
            <summary>
            max
            </summary>
        </member>
        <member name="T:HPSocket.Ssl.SslSessionMode">
            <summary>
            标识 SSL 的工作模式，客户端模式或服务端模式
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionMode.Client">
            <summary>
            客户端模式
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslSessionMode.Server">
            <summary>
            服务端模式
            </summary>
        </member>
        <member name="T:HPSocket.Ssl.SslVerifyMode">
            <summary>
            SSL 验证模式选项，SSL_VM_PEER 可以和后面两个选项组合一起
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslVerifyMode.None">
            <summary>
            SSL_VERIFY_NONE
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslVerifyMode.Peer">
            <summary>
            SSL_VERIFY_PEER
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslVerifyMode.FailIfNoPeerCert">
            <summary>
            SSL_VERIFY_FAIL_IF_NO_PEER_CERT
            </summary>
        </member>
        <member name="F:HPSocket.Ssl.SslVerifyMode.ClientOnce">
            <summary>
            SSL_VERIFY_CLIENT_ONCE
            </summary>
        </member>
        <member name="T:HPSocket.Ssl.ISsl">
            <summary>
            ssl 基础接口
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.ISsl.CipherList">
            <summary>
            获取或设置 SSL 加密算法列表
            <remarks>使用方法请参阅:<see href="https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_cipher_list.html"/>  和 <see href="https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html"/></remarks>
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.ISsl.AutoHandShake">
            <summary>
            获取或设置通信组件握手方式（默认：true，自动握手)
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.ISsl.VerifyMode">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.ISsl.PemCertFile">
            <summary>
            证书文件（客户端可选）
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.ISsl.PemKeyFile">
            <summary>
            私钥文件（客户端可选）
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.ISsl.KeyPassword">
            <summary>
            私钥密码（没有密码则为空）
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.ISsl.CaPemCertFileOrPath">
            <summary>
            CA 证书文件或目录（单向验证或客户端可选）
            </summary>
        </member>
        <member name="M:HPSocket.Ssl.ISsl.Initialize(System.Boolean)">
            <summary>
            初始化ssl环境
            </summary>
            <param name="memory">是否从内存加载证书，如果为false，[PemCertFile,PemKeyFile,CaPemCertFileOrPath]这些属性应该是文件路径;如果为true，[PemCertFile,PemKeyFile,CaPemCertFileOrPath]这些属性应该是证书文件的内容，而不是文件路径</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Ssl.ISsl.UnInitialize">
            <summary>
            卸载ssl环境
            </summary>
        </member>
        <member name="T:HPSocket.Ssl.SslAgent`1">
            <summary>
            ssl agent
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.Ssl.SslAgent`1.OnParseRequestBody">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslAgent`1.DataReceiveAdapter">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslAgent`1.Start">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslAgent.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.SslAgent.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslAgent.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslAgent.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslAgent.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslAgent.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslAgent.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslAgent.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslAgent.Start">
            <summary>
            启动服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Ssl.SslAgent.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslAgent.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslAgent.StartHandShake(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslAgent.GetSessionInfo(System.IntPtr,HPSocket.Ssl.SslSessionInfo,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslAgent.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:HPSocket.Ssl.SslClient`1">
            <summary>
            ssl client
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.Ssl.SslClient`1.OnParseRequestBody">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslClient`1.DataReceiveAdapter">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslClient`1.Connect">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslClient`1.Connect(System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslClient.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.SslClient.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslClient.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslClient.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslClient.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslClient.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslClient.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslClient.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslClient.Connect">
            <summary>
            启动通讯组件并连接到服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Ssl.SslClient.Connect(System.String,System.UInt16)">
            <summary>
            启动通讯组件并连接到服务器
            </summary>
            <param name="address">远程服务器地址</param>
            <param name="port">远程服务器端口</param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Ssl.SslClient.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslClient.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslClient.StartHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslClient.GetSessionInfo(HPSocket.Ssl.SslSessionInfo,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslClient.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:HPSocket.Ssl.SslPackAgent.MaxPackSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslPackAgent.PackHeaderFlag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslPackClient.MaxPackSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslPackClient.PackHeaderFlag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslPackServer.MaxPackSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslPackServer.PackHeaderFlag">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Ssl.SslPullAgent.OnReceive">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullAgent.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullAgent.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullAgent.Fetch(System.IntPtr,System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullAgent.Peek(System.IntPtr,System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Ssl.SslPullClient.OnReceive">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullClient.Fetch(System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullClient.Peek(System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullClient.Fetch(System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullClient.Peek(System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Ssl.SslPullServer.OnReceive">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullServer.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullServer.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullServer.Fetch(System.IntPtr,System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslPullServer.Peek(System.IntPtr,System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Ssl.SslServer`1">
            <summary>
            ssl server
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.Ssl.SslServer`1.OnParseRequestBody">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslServer`1.DataReceiveAdapter">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer`1.Start">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Ssl.SslServer">
            <summary>
            ssl server
            </summary>
        </member>
        <member name="P:HPSocket.Ssl.SslServer.IsInitSsl">
            <summary>
            获取或设置是否初始化ssl环境
            </summary>
        </member>
        <member name="M:HPSocket.Ssl.SslServer.Start">
            <summary>
            启动服务
            </summary>
            <returns></returns>
        </member>
        <member name="P:HPSocket.Ssl.SslServer.VerifyMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslServer.PemCertFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslServer.PemKeyFile">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslServer.KeyPassword">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslServer.CaPemCertFileOrPath">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslServer.CipherList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Ssl.SslServer.AutoHandShake">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer.UnInitialize">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer.AddContext(HPSocket.Ssl.SslVerifyMode,System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer.AddContextByMemory(HPSocket.Ssl.SslVerifyMode,System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer.BindServerName(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer.StartHandShake(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer.GetSessionInfo(System.IntPtr,HPSocket.Ssl.SslSessionInfo,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Ssl.SslServer.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:HPSocket.Ssl.SslUtils">
            <summary>
            ssl 工具类
            </summary>
        </member>
        <member name="M:HPSocket.Ssl.SslUtils.DefaultServerNameCallback(System.String,System.IntPtr)">
            <summary>
            SNI 默认回调函数
            <para>SSL Server 的 SetupSSLContext 方法中如果不指定 SNI 回调函数则使用此 SNI 默认回调函数</para>
            </summary>
            <param name="serverName">请求域名</param>
            <param name="context">ssl context 对象</param>
            <returns>SNI 主机证书对应的索引</returns>
        </member>
        <member name="M:HPSocket.Ssl.SslUtils.RemoveThreadLocalState">
             <summary>
             清理线程局部环境 SSL 资源
            <para>清理 SSL 全局运行环境，回收 SSL 相关内存</para> 
            <para>任何一个操作 SSL 的线程，通信结束时都需要清理线程局部环境 SSL 资源</para> 
            <para>1、主线程和 HP-Socket 工作线程在通信结束时会自动清理线程局部环境 SSL 资源。因此，一般情况下不必手工调用本方法</para> 
            <para>2、特殊情况下，当自定义线程参与 HP-Socket 通信操作并检查到 SSL 内存泄漏时，需在每次通信结束时自定义线程调用本方法</para> 
             </summary>
        </member>
        <member name="T:HPSocket.Tcp.FetchResult">
            <summary>
            数据抓取结果,数据抓取操作的返回值
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.FetchResult.Ok">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.FetchResult.LengthTooLong">
            <summary>
            抓取长度过大
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.FetchResult.DataNotFound">
            <summary>
            找不到 ConnID 对应的数据
            </summary>
        </member>
        <member name="T:HPSocket.Tcp.TcpConnectionState">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.TcpConnectionState.Connecting">
            <summary>
            连接中
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.TcpConnectionState.Connected">
            <summary>
            已连接
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.TcpConnectionState.TimedOut">
            <summary>
            连接超时
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.TcpConnectionState.Closed">
            <summary>
            已关闭
            </summary>
        </member>
        <member name="T:HPSocket.Tcp.TcpPortForwardingReleaseType">
            <summary>
            释放方式
            </summary>
        </member>
        <member name="T:HPSocket.Tcp.TcpAgent`1">
            <summary>
            tcp agent
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.Tcp.TcpAgent`1.OnParseRequestBody">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpAgent`1.DataReceiveAdapter">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpAgent`1.Start">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpAgent">
            <summary>
            tcp agent
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpAgent.SocketBufferSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpAgent.KeepAliveTime">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpAgent.KeepAliveInterval">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpAgent.SendSmallFile(System.IntPtr,System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpAgent.SendSmallFile(System.IntPtr,System.String,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpClient`1">
            <summary>
            tcp client
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.Tcp.TcpClient`1.OnParseRequestBody">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpClient`1.DataReceiveAdapter">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpClient`1.Connect">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpClient`1.Connect(System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpClient">
            <summary>
            tcp client
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpClient.SocketBufferSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpClient.KeepAliveTime">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpClient.KeepAliveInterval">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpClient.SendSmallFile(System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpClient.SendSmallFile(System.String,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpPackAgent">
            <summary>
            tcp pack agent
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPackAgent.MaxPackSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPackAgent.PackHeaderFlag">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpPackClient">
            <summary>
            tcp pack client
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPackClient.MaxPackSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPackClient.PackHeaderFlag">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpPackServer">
            <summary>
            tcp pack server
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPackServer.MaxPackSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPackServer.PackHeaderFlag">
            <inheritdoc />
        </member>
        <member name="F:HPSocket.Tcp.TcpPortForwarding._disposed">
            <summary>
            是否释放了
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.TcpPortForwarding._init">
            <summary>
            是否初始化了
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.TcpPortForwarding._server">
            <summary>
            server
            </summary>
        </member>
        <member name="F:HPSocket.Tcp.TcpPortForwarding._agent">
            <summary>
            agent
            </summary>
        </member>
        <member name="E:HPSocket.Tcp.TcpPortForwarding.OnServerAccept">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Tcp.TcpPortForwarding.OnServerReceive">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Tcp.TcpPortForwarding.OnServerClose">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Tcp.TcpPortForwarding.OnAgentConnect">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Tcp.TcpPortForwarding.OnAgentReceive">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Tcp.TcpPortForwarding.OnAgentClose">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.Server">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.Agent">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.SenderPtr">
            <summary>
            该属性不适用在当前组件
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.Tag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.Version">
            <summary>
            当前组件版本
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.LocalBindAddress">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.LocalBindPort">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.TargetAddress">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.TargetPort">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.EachWorkThreadCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.MaxConnectionCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.ConnectionTimeout">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.ProxyList">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.ErrorCode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwarding.ErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.SetErrorInfo(HPSocket.IAgent)">
            <summary>
            设置错误信息
            </summary>
            <param name="agent"></param>
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.SetErrorInfo(HPSocket.IServer)">
            <summary>
            设置错误信息
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.Start">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.Stop">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.Wait(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.WaitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HPSocket.Tcp.TcpPortForwarding.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:HPSocket.Tcp.TcpPortForwardingExtra">
            <summary>
            tcp 端口转发附加数据
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwardingExtra.ServerConnId">
            <summary>
            server 对应的 conn id
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwardingExtra.AgentConnId">
            <summary>
            agent 对应的 conn id
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwardingExtra.Server">
            <summary>
            server 对象
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwardingExtra.Agent">
            <summary>
            agent 对象
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpPortForwardingExtra.ReleaseType">
            <summary>
            释放方式
            </summary>
        </member>
        <member name="T:HPSocket.Tcp.TcpPullAgent">
            <summary>
            tcp pull agent
            </summary>
        </member>
        <member name="E:HPSocket.Tcp.TcpPullAgent.OnReceive">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullAgent.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullAgent.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullAgent.Fetch(System.IntPtr,System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullAgent.Peek(System.IntPtr,System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpPullClient">
            <summary>
            tcp pull client
            </summary>
        </member>
        <member name="E:HPSocket.Tcp.TcpPullClient.OnReceive">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullClient.Fetch(System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullClient.Peek(System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullClient.Fetch(System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullClient.Peek(System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpPullServer">
            <summary>
            tcp pull server
            </summary>
        </member>
        <member name="E:HPSocket.Tcp.TcpPullServer.OnReceive">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullServer.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullServer.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullServer.Fetch(System.IntPtr,System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpPullServer.Peek(System.IntPtr,System.Int32,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpServer`1">
            <summary>
            tcp server
            </summary>
            <typeparam name="TRequestBodyType">包体解析对象类型</typeparam>
        </member>
        <member name="E:HPSocket.Tcp.TcpServer`1.OnParseRequestBody">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpServer`1.DataReceiveAdapter">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpServer`1.Start">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Tcp.TcpServer">
            <summary>
            tcp server
            </summary>
        </member>
        <member name="P:HPSocket.Tcp.TcpServer.AcceptSocketCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpServer.SocketBufferSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpServer.SocketListenQueue">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpServer.KeepAliveTime">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Tcp.TcpServer.KeepAliveInterval">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpServer.SendSmallFile(System.IntPtr,System.String,HPSocket.Wsabuf@,HPSocket.Wsabuf@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Tcp.TcpServer.SendSmallFile(System.IntPtr,System.String,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.Thread.TaskProc">
            <summary>
            任务处理函数
            <para>任务处理入口函数</para>
            </summary>
            <param name="arg">自定义参数</param>
        </member>
        <member name="T:HPSocket.Thread.TaskProcEx">
            <summary>
            任务处理函数扩展板
            <para>任务处理入口函数</para>
            </summary>
            <param name="obj">自定义参数</param>
        </member>
        <member name="T:HPSocket.Thread.SocketTaskProc">
            <summary>
            Socket 任务处理函数
            <para>Socket 任务处理入口函数</para>
            </summary>
            <param name="task">task -- Socket 任务结构体指针</param>
        </member>
        <member name="T:HPSocket.Thread.RejectedPolicy">
            <summary>
            拒绝策略, 调用被拒绝后的处理策略
            </summary>
        </member>
        <member name="F:HPSocket.Thread.RejectedPolicy.CallFail">
            <summary>
            立刻返回失败
            </summary>
        </member>
        <member name="F:HPSocket.Thread.RejectedPolicy.WaitFor">
            <summary>
            等待（直到成功、超时或线程池关闭等原因导致失败）
            </summary>
        </member>
        <member name="F:HPSocket.Thread.RejectedPolicy.CallerRun">
            <summary>
            调用者线程直接执行
            </summary>
        </member>
        <member name="T:HPSocket.Thread.TaskBufferType">
            <summary>
            任务缓冲区类型,  SocketTask 对象创建和销毁时，根据不同类型的缓冲区类型作不同的处理
            </summary>
        </member>
        <member name="F:HPSocket.Thread.TaskBufferType.Copy">
            <summary>
            深拷贝
            </summary>
        </member>
        <member name="F:HPSocket.Thread.TaskBufferType.Refer">
            <summary>
             浅拷贝
            </summary>
        </member>
        <member name="F:HPSocket.Thread.TaskBufferType.Attach">
            <summary>
            连接（不负责创建，但负责销毁）
            </summary>
        </member>
        <member name="T:HPSocket.Thread.SocketTask">
            <summary>
            Socket 任务结构体, 封装 Socket 任务相关数据结构
            </summary>
        </member>
        <member name="F:HPSocket.Thread.SocketTask.SocketTaskProc">
            <summary>
            任务处理函数
            </summary>
        </member>
        <member name="F:HPSocket.Thread.SocketTask.Sender">
            <summary>
            发起对象
            </summary>
        </member>
        <member name="F:HPSocket.Thread.SocketTask.ConnId">
            <summary>
            连接 Id
            </summary>
        </member>
        <member name="F:HPSocket.Thread.SocketTask.Buffer">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="F:HPSocket.Thread.SocketTask.BufferSize">
            <summary>
            数据缓冲区长度
            </summary>
        </member>
        <member name="F:HPSocket.Thread.SocketTask.BufferType">
            <summary>
            缓冲区类型
            </summary>
        </member>
        <member name="F:HPSocket.Thread.SocketTask.WParam">
            <summary>
            自定义参数
            </summary>
        </member>
        <member name="F:HPSocket.Thread.SocketTask.LParam">
            <summary>
            自定义参数
            </summary>
        </member>
        <member name="T:HPSocket.Thread.ThreadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:HPSocket.Thread.ThreadPool._disposed">
            <summary>
            是否释放了
            </summary>
        </member>
        <member name="F:HPSocket.Thread.ThreadPool._pool">
            <summary>
            线程池指针
            </summary>
        </member>
        <member name="F:HPSocket.Thread.ThreadPool._extraData">
            <summary>
            附加数据, 用于管理扩展板回调函数参数
            </summary>
        </member>
        <member name="F:HPSocket.Thread.ThreadPool._taskProc">
            <summary>
            任务回调函数, 用于产生扩展板回调函数
            </summary>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.Start(System.Int32,HPSocket.Thread.RejectedPolicy,System.UInt32,System.UInt32)">
            <summary>
            启动线程池组件
            </summary>
            <param name="threadCount">线程数量, 大于0: dwThreadCount, 等于0: (CPU核数* 2 + 2), 小于0: (CPU核数* (-threadCount))</param>
            <param name="policy">任务拒绝处理策略</param>
            <param name="maxQueueSize">任务队列最大容量（0：不限制，默认：0）</param>
            <param name="stackSize">线程堆栈空间大小（默认：0 -> 操作系统默认）</param>
            <returns>true: 成功, false: 失败，可通过 ErrorCode 属性 获取系统错误代码</returns>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.Stop(System.Int32)">
            <summary>
            在规定时间内关闭线程池组件，如果工作线程在最大等待时间内未能正常关闭，会尝试强制关闭，这种情况下很可能会造成系统资源泄漏
            </summary>
            <param name="maxWait">最大等待时间（毫秒，默认：INFINITE即-1，一直等待）</param>
            <returns>true: 成功, false: 失败，可通过 ErrorCode 属性 获取系统错误代码</returns>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.Submit(HPSocket.Thread.TaskProcEx,System.Object,System.Int32)">
            <summary>
            向线程池提交异步任务
            </summary>
            <param name="taskProc">任务处理函数</param>
            <param name="obj">任务参数</param>
            <param name="maxWait">最大等待时间（毫秒，默认：INFINITE即-1，一直等待）</param>
            <returns>true: 成功, false: 失败，可通过 ErrorCode 属性 获取系统错误代码，其中，错误码 ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满</returns>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.MyTaskProc(System.IntPtr)">
            <summary>
            TaskProc 转 TaskProcEx
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.AdjustThreadCount(System.Int32)">
            <summary>
            增加或减少线程池的工作线程数量
            </summary>
            <param name="count">线程数量， 大于0: count， 等于0: (CPU核数 * 2 + 2)， 小于0: (CPU核数 * (-count))</param>
            <returns>true: 成功, false: 失败，可通过 ErrorCode 属性 获取系统错误代码</returns>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.Wait(System.Int32)">
            <summary>
            等待线程池组件停止运行
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.WaitAsync(System.Int32)">
            <summary>
            等待线程池组件停止运行
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.StopAsync(System.Int32)">
            <summary>
            在规定时间内关闭线程池组件，如果工作线程在最大等待时间内未能正常关闭，会尝试强制关闭，这种情况下很可能会造成系统资源泄漏
            </summary>
            <param name="maxWait">最大等待时间（毫秒，默认：INFINITE即-1，一直等待）</param>
            <returns>true: 成功, false: 失败，可通过 ErrorCode 属性 获取系统错误代码</returns>
        </member>
        <member name="P:HPSocket.Thread.ThreadPool.TaskCount">
            <summary>
            获取当前正在执行的任务数量
            </summary>
        </member>
        <member name="P:HPSocket.Thread.ThreadPool.ThreadCount">
            <summary>
            获取或设置线程池数量
            <para>设置线程池数量时, 大于0: count, 等于0: (CPU核数 * 2 + 2), 小于0: (CPU核数 * (-count))</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:HPSocket.Thread.ThreadPool.HasStarted">
            <summary>
            检查线程池组件是否已启动
            </summary>
            <returns></returns>
        </member>
        <member name="P:HPSocket.Thread.ThreadPool.State">
            <summary>
            查看线程池组件当前状态
            </summary>
        </member>
        <member name="P:HPSocket.Thread.ThreadPool.QueueSize">
            <summary>
            获取当前任务队列大小
            </summary>
        </member>
        <member name="P:HPSocket.Thread.ThreadPool.MaxQueueSize">
            <summary>
            获取任务队列最大容量
            </summary>
        </member>
        <member name="P:HPSocket.Thread.ThreadPool.RejectedPolicy">
            <summary>
            获取任务拒绝处理策略
            </summary>
        </member>
        <member name="P:HPSocket.Thread.ThreadPool.ErrorCode">
            <summary>
            获取系统返回的错误码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HPSocket.Thread.ThreadPool.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:HPSocket.Thread.ThreadProcExArgs.Arg">
            <summary>
            任务参数
            </summary>
        </member>
        <member name="P:HPSocket.Thread.ThreadProcExArgs.TaskProc">
            <summary>
            任务回调地址
            </summary>
        </member>
        <member name="T:HPSocket.Udp.CastMode">
            <summary>
            播送模式  UDP 组件的播送模式（组播或广播）
            </summary>
        </member>
        <member name="F:HPSocket.Udp.CastMode.UniCast">
            <summary>
            单播
            </summary>
        </member>
        <member name="F:HPSocket.Udp.CastMode.Multicast">
            <summary>
            组播
            </summary>
        </member>
        <member name="F:HPSocket.Udp.CastMode.Broadcast">
            <summary>
            广播
            </summary>
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.IsNoDelay">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.IsTurnoffCongestCtrl">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.FlushInterval">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.ResendByAcks">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.SendWndSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.RecvWndSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.MinRto">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.MaxTransUnit">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.MaxMessageSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.HandShakeTimeout">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqClient.FastLimit">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpArqClient.GetWaitingSendMessageCount(System.Int32@)">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.IsNoDelay">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.IsTurnoffCongestCtrl">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.FlushInterval">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.ResendByAcks">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.SendWndSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.RecvWndSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.MinRto">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.MaxTransUnit">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.MaxMessageSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.HandShakeTimeout">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpArqServer.FastLimit">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpArqServer.GetWaitingSendMessageCount(System.IntPtr,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpCast.MaxDatagramSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpCast.CastMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpCast.MultiCastTtl">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpCast.IsMultiCastLoop">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpCast.GetRemoteAddress(System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpClient.MaxDatagramSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpClient.DetectAttempts">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpClient.DetectInterval">
            <inheritdoc />
        </member>
        <member name="F:HPSocket.Udp.UdpNode._disposed">
            <summary>
            是否释放了
            </summary>
        </member>
        <member name="F:HPSocket.Udp.UdpNode.ListenerPtr">
            <summary>
            监听对象指针
            </summary>
        </member>
        <member name="P:HPSocket.Udp.UdpNode.SenderPtr">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.Tag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.Address">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.Port">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Udp.UdpNode.OnPrepareListen">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Udp.UdpNode.OnSend">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Udp.UdpNode.OnReceive">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Udp.UdpNode.OnError">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.Udp.UdpNode.OnShutdown">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.HasStarted">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.State">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.CastMode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.PendingDataLength">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.MaxDatagramSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.IsReuseAddress">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.MultiCastTtl">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.IsMultiCastLoop">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.WorkerThreadCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.PostReceiveCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.FreeBufferPoolSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.FreeBufferPoolHold">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.ReuseAddressPolicy">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.ErrorCode">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.Version">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.ErrorMessage">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpNode.ExtraData">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Start">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.StartWithCast(HPSocket.Udp.CastMode,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Stop">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Wait(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.WaitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Send(System.String,System.UInt16,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Send(System.String,System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Send(System.String,System.UInt16,HPSocket.Wsabuf[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.SendCast(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.SendCast(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.SendCast(HPSocket.Wsabuf[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.GetLocalAddress(System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.GetCastAddress(System.String@,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.Udp.UdpNode.CreateListener">
            <summary>
            创建socket监听和服务组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HPSocket.Udp.UdpNode.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:HPSocket.Udp.UdpServer.MaxDatagramSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpServer.PostReceiveCount">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpServer.DetectAttempts">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.Udp.UdpServer.DetectInterval">
            <inheritdoc />
        </member>
        <member name="T:HPSocket.WebSocket.CompressionMethod">
            <summary>
            指定压缩方法
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.CompressionMethod.None">
            <summary>
            不指定压缩
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.CompressionMethod.Deflate">
            <summary>
            指定 DEFLATE
            </summary>
        </member>
        <member name="T:HPSocket.WebSocket.OpCode">
            <summary>
            帧类型
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.OpCode.Cont">
            <summary>
            延续帧 - 非控制帧
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.OpCode.Text">
            <summary>
            文本帧 - 非控制帧
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.OpCode.Binary">
            <summary>
            二进制帧 - 非控制帧
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.OpCode.Close">
            <summary>
            关闭帧 - 控制帧
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.OpCode.Ping">
            <summary>
            ping帧 - 控制帧
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.OpCode.Pong">
            <summary>
            pong帧 - 控制帧
            </summary>
        </member>
        <member name="T:HPSocket.WebSocket.Rsv">
            <summary>
            指示 web socket 帧的每个RSV（RSV1、RSV2和RSV3）的值
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.Rsv.Off">
            <summary>
            表示全部为0
            </summary>
        </member>
        <member name="F:HPSocket.WebSocket.Rsv.Compression">
            <summary>
            表示 RSV1 = 1, 压缩位
            </summary>
        </member>
        <member name="T:HPSocket.WebSocket.Hub">
            <summary>
            web socket hub
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.Hub.ConnectionIds">
            <summary>
            获取连接到当前Hub的连接
            </summary>
        </member>
        <member name="M:HPSocket.WebSocket.Hub.OnMessage(HPSocket.IWebSocketServer,System.IntPtr,System.Boolean,HPSocket.WebSocket.OpCode,System.Byte[],System.Byte[])">
            <summary>
            cont/text/binary 消息
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="final"></param>
            <param name="opCode"></param>
            <param name="mask"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.WebSocket.Hub.OnOpen(HPSocket.IWebSocketServer,System.IntPtr)">
            <summary>
            握手成功, 打开/进入 连接
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.WebSocket.Hub.OnClose(HPSocket.IWebSocketServer,System.IntPtr,HPSocket.SocketOperation,System.Int32)">
            <summary>
            连接关闭
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="socketOperation"></param>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.WebSocket.Hub.OnPing(HPSocket.IWebSocketServer,System.IntPtr,System.Byte[])">
            <summary>
            ping 消息
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="data"></param>
        </member>
        <member name="M:HPSocket.WebSocket.Hub.OnPong(HPSocket.IWebSocketServer,System.IntPtr,System.Byte[])">
            <summary>
            pong 消息
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="data"></param>
        </member>
        <member name="T:HPSocket.WebSocket.IHub">
            <summary>
            web socket hub
            </summary>
        </member>
        <member name="M:HPSocket.WebSocket.IHub.OnMessage(HPSocket.IWebSocketServer,System.IntPtr,System.Boolean,HPSocket.WebSocket.OpCode,System.Byte[],System.Byte[])">
            <summary>
            cont/text/binary 消息
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="final"></param>
            <param name="opCode"></param>
            <param name="mask"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.WebSocket.IHub.OnOpen(HPSocket.IWebSocketServer,System.IntPtr)">
            <summary>
            握手成功, 打开/进入 连接
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.WebSocket.IHub.OnClose(HPSocket.IWebSocketServer,System.IntPtr,HPSocket.SocketOperation,System.Int32)">
            <summary>
            连接关闭
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="socketOperation"></param>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.WebSocket.IHub.OnPing(HPSocket.IWebSocketServer,System.IntPtr,System.Byte[])">
            <summary>
            ping 消息
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="data"></param>
        </member>
        <member name="M:HPSocket.WebSocket.IHub.OnPong(HPSocket.IWebSocketServer,System.IntPtr,System.Byte[])">
            <summary>
            pong 消息
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="data"></param>
        </member>
        <member name="T:HPSocket.WebSocket.MessageState">
            <summary>
            web socket message state
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.MessageState.Final">
            <summary>
            是否结束帧
            <para>是否是最后1帧，1个消息由1个或多个数据帧构成，若消息由1帧构成，起始帧就是结束帧。</para>
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.MessageState.Rsv">
            <summary>
            RSV1/RSV2/RSV3 各 1 位
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.MessageState.OpCode">
            <summary>
            帧类型
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.MessageState.Mask">
            <summary>
            掩码
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.MessageState.BodyLength">
            <summary>
            消息总长度
            <para>bodyLen 等于 0: 消息总长度为 length</para>
            <para>bodyLen 等于 length: 消息总长度为 bodyLen</para>
            <para>bodyLen 大于 0: 消息总长度为 bodyLen，后续消息体长度为 bodyLen - length，后续消息体通过底层方法 Text() / SendPackets() 发送</para>
            <para>bodyLen 小于 0: 错误参数，发送失败</para>
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.MessageState.BodyRemain">
            <summary>
            剩余
            </summary>
        </member>
        <member name="T:HPSocket.WebSocket.SslConfiguration">
            <summary>
            ssl configuration
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.SslConfiguration.VerifyMode">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.SslConfiguration.PemCertFile">
            <summary>
            证书文件（客户端可选）
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.SslConfiguration.PemKeyFile">
            <summary>
            私钥文件（客户端可选）
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.SslConfiguration.KeyPassword">
            <summary>
            私钥密码（没有密码则为空）
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.SslConfiguration.CaPemCertFileOrPath">
            <summary>
            CA 证书文件或目录（单向验证或客户端可选）
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.SslConfiguration.FromMemory">
            <summary>
            从内存加载证书
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.Tag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.BindAddress">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.IgnoreCompressionExtensions">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.Http">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.Uri">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.IsSecure">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.MaxPacketSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.SenderPtr">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.Version">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.DefaultMask">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.UserAgent">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.Cookie">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.ConnectionTimeout">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.HasStarted">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.WebSocket.WebSocketAgent.OnMessage">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.WebSocket.WebSocketAgent.OnOpen">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.WebSocket.WebSocketAgent.OnClose">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.WebSocket.WebSocketAgent.OnPing">
            <inheritdoc />
        </member>
        <member name="E:HPSocket.WebSocket.WebSocketAgent.OnPong">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.SslConfiguration">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketAgent.SubProtocols">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.#ctor(System.String,System.String[])">
            <summary>
            创建websocket客户端实例
            </summary>
            <param name="url">协议地址, 例如ws://127.0.0.1:8080/chat或wss://127.0.0.1:8080/chat</param>
            <param name="protocols">支持的子协议</param>
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Start">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Stop">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Wait(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.WaitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Connect">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Send(System.IntPtr,System.Boolean,HPSocket.WebSocket.OpCode,System.Byte[],System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Send(System.IntPtr,System.Boolean,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="final"></param>
            <param name="opCode"></param>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Send(System.IntPtr,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Text(System.IntPtr,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Ping(System.IntPtr,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Pong(System.IntPtr,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Close(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.GetAllConnectionIds">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Destroy">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketAgent.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.Tag">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.Http">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.Uri">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.IsSecure">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.IgnoreCompressionExtensions">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.PingInterval">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.SenderPtr">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.Version">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.MaxPacketSize">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.SslConfiguration">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.SubProtocols">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Start">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Stop">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Wait(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.WaitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Send(System.IntPtr,System.Boolean,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Send(System.IntPtr,HPSocket.WebSocket.OpCode,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Text(System.IntPtr,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Ping(System.IntPtr,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Pong(System.IntPtr,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Close(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.GetAllConnectionIds">
            <inheritdoc />
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketServer.HasStarted">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.AddHub``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.GetHub``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.RemoveHub(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.ProcessSecWebSocketExtensionsClientHeader(System.String,HPSocket.WebSocket.CompressionMethod@,System.String@)">
            <summary>
            处理 Sec-WebSocket-Extensions 头
            <remarks>抄自 websocket-sharp <see>
                    <cref>https://github.com/sta/websocket-sharp</cref>
                </see>
            </remarks>
            </summary>
            <param name="value"></param>
            <param name="compression"></param>
            <param name="extensions"></param>
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.PingTimer(System.IntPtr)">
            <summary>
            ping消息定时器
            </summary>
            <param name="connId"></param>
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Destroy">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HPSocket.WebSocket.WebSocketServer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:HPSocket.WebSocket.WebSocketSession">
            <summary>
            web socket 连接对象的会话
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.Final">
            <summary>
            是否结束帧
            <para>是否是最后1帧，1个消息由1个或多个数据帧构成，若消息由1帧构成，起始帧就是结束帧。</para>
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.Rsv">
            <summary>
            RSV1/RSV2/RSV3 各 1 位
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.OpCode">
            <summary>
            帧类型
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.Mask">
            <summary>
            掩码
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.Path">
            <summary>
            访问路径
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.SecWebSocketProtocol">
            <summary>
            协议
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.SecWebSocketExtensions">
            <summary>
            扩展
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.SecWebSocketKey">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.Compression">
            <summary>
            每帧压缩方法
            </summary>
        </member>
        <member name="P:HPSocket.WebSocket.WebSocketSession.Data">
            <summary>
            连接对象的完整数据
            </summary>
        </member>
    </members>
</doc>
